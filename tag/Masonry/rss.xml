<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    
    <title>nju520.me</title>
    
    <link>http://localhost:4000</link>
    <description>nju520's Blog</description>
    <language>en-uk</language>
    <managingEditor> nju520</managingEditor>
    <atom:link href="rss" rel="self" type="application/rss+xml" />
    
<item>
  <title>iOS 源代码分析----Masonry</title>
  <link>//ios-yuan-dai-ma-fen-xi-masonry</link>
  <author>nju520</author>
  <pubDate>2015-04-27T16:40:22+08:00</pubDate>
  <guid>//ios-yuan-dai-ma-fen-xi-masonry</guid>
  <description><![CDATA[
  <p><a href="https://github.com/SnapKit/Masonry">Masonry</a> 是 Objective-C 中用于自动布局的第三方框架, 我们一般使用它来代替冗长, 繁琐的 AutoLayout 代码.</p>

<p>Masonry 的使用还是很简洁的:</p>

<pre><code class="language-objectivec">[button mas_makeConstraints:^(MASConstraintMaker *make) {
	make.centerX.equalTo(self.view);
	make.top.equalTo(self.view).with.offset(40);
	make.width.equalTo(@185);
	make.height.equalTo(@38);
}];
</code></pre>

<h2 id="从-mas_makeconstraints-开始">从 mas_makeConstraints: 开始</h2>

<p>其中最常用的方法就是</p>

<pre><code class="language-objectivec">// View+MASAdditions.h

- (NSArray *)mas_makeConstraints:(void(^)(MASConstraintMaker *make))block;
</code></pre>

<p>同样, 也有用于<strong>更新和重新构建</strong>约束的分类方法:</p>

<pre><code class="language-objectivec">// View+MASAdditions.h

- (NSArray *)mas_updateConstraints:(void(^)(MASConstraintMaker *make))block;
- (NSArray *)mas_remakeConstraints:(void(^)(MASConstraintMaker *make))block;
</code></pre>

<h2 id="constraint-maker-block">Constraint Maker Block</h2>

<p>我们以 <code>mas_makeConstraints:</code> 方法为入口来分析一下 Masonry 以及类似的框架(SnapKit)是如何工作的. <code>mas_makeConstraints:</code> 方法位于 <code>UIView</code> 的分类 <code>MASAdditions</code> 中.</p>

<blockquote>
  <pre><code>Provides constraint maker block and convience methods for creating MASViewAttribute which are view + NSLayoutAttribute pairs.
</code></pre>
</blockquote>

<p>这个分类为我们提供一种非常便捷的方法来配置 <code>MASConstraintMaker</code>, 并为视图添加 <code>mas_left</code> <code>mas_right</code> 等属性.</p>

<p>方法的实现如下:</p>

<pre><code class="language-objectivec">// View+MASAdditions.m

- (NSArray *)mas_makeConstraints:(void(^)(MASConstraintMaker *))block {
    self.translatesAutoresizingMaskIntoConstraints = NO;
    MASConstraintMaker *constraintMaker = [[MASConstraintMaker alloc] initWithView:self];
    block(constraintMaker);
    return [constraintMaker install];
}
</code></pre>

<p>因为 Masonry 是封装的苹果的 AutoLayout 框架, 所以我们要在为视图添加约束前将 <code>translatesAutoresizingMaskIntoConstraints</code> 属性设置为 <code>NO</code>. 如果这个属性没有被正确设置, 那么视图的约束不会被成功添加.</p>

<p>在设置 <code>translatesAutoresizingMaskIntoConstraints</code> 属性之后,</p>

<ul>
  <li>我们会初始化一个 <code>MASConstraintMaker</code> 的实例.</li>
  <li>然后将 maker 传入 block 配置其属性.</li>
  <li>最后调用 maker 的 <code>install</code> 方法为视图添加约束.</li>
</ul>

<h2 id="masconstraintmaker">MASConstraintMaker</h2>

<p><code>MASConstraintMaker</code> 为我们提供了工厂方法来创建 <code>MASConstraint</code>. 所有的约束都会被收集直到它们最后调用 <code>install</code> 方法添加到视图上.</p>

<blockquote>
  <p>Provides factory methods for creating MASConstraints. Constraints are collected until they are ready to be installed</p>
</blockquote>

<p>在初始化 <code>MASConstraintMaker</code> 的实例时, 它会<strong>持有一个对应 view 的弱引用</strong>, 并初始化一个  <code>constraints</code> 的空可变数组用来之后配置属性时持有所有的约束.</p>

<pre><code class="language-objectivec">// MASConstraintMaker.m

- (id)initWithView:(MAS_VIEW *)view {
    self = [super init];
    if (!self) return nil;

    self.view = view;
    self.constraints = NSMutableArray.new;

    return self;
}
</code></pre>

<p>这里的 <code>MAS_VIEW</code> 是一个宏, 是 <code>UIView</code> 的 alias.</p>

<pre><code class="language-c">// MASUtilities.h

#define MAS_VIEW UIView
</code></pre>

<h2 id="setup-masconstraintmaker">Setup MASConstraintMaker</h2>

<p>在调用 <code>block(constraintMaker)</code> 时, 实际上是对 <code>constraintMaker</code> 的配置.</p>

<pre><code class="language-objectivec">make.centerX.equalTo(self.view);
make.top.equalTo(self.view).with.offset(40);
make.width.equalTo(@185);
make.height.equalTo(@38);
</code></pre>

<h3 id="makeleft">make.left</h3>

<p>访问 <code>make</code> 的 <code>left</code> <code>right</code> <code>top</code> <code>bottom</code>  等属性时, 会调用 <code>constraint:addConstraintWithLayoutAttribute:</code> 方法.</p>

<pre><code class="language-objectivec">// MASViewConstraint.m

- (MASConstraint *)left {
    return [self addConstraintWithLayoutAttribute:NSLayoutAttributeLeft];
}

- (MASConstraint *)addConstraintWithLayoutAttribute:(NSLayoutAttribute)layoutAttribute {
    return [self constraint:nil addConstraintWithLayoutAttribute:layoutAttribute];
}

- (MASConstraint *)constraint:(MASConstraint *)constraint addConstraintWithLayoutAttribute:(NSLayoutAttribute)layoutAttribute {
    MASViewAttribute *viewAttribute = [[MASViewAttribute alloc] initWithView:self.view layoutAttribute:layoutAttribute];
    MASViewConstraint *newConstraint = [[MASViewConstraint alloc] initWithFirstViewAttribute:viewAttribute];
    if ([constraint isKindOfClass:MASViewConstraint.class]) { ... }
    if (!constraint) {
        newConstraint.delegate = self;
        [self.constraints addObject:newConstraint];
    }
    return newConstraint;
}
</code></pre>

<p>在调用链上最终会达到 <code>constraint:addConstraintWithLayoutAttribute:</code> 这一方法, 在这里省略了一些暂时不需要了解的问题. 因为在这个类中传入该方法的第一个参数一直为 <code>nil</code>, 所以这里省略的代码不会执行.</p>

<p>这部分代码会先以布局属性 <code>left</code> 和视图本身初始化一个 <code>MASViewAttribute</code> 的实例, 之后使用 <code>MASViewAttribute</code> 的实例初始化一个 <code>constraint</code> 并设置它的代理, 加入数组, 然后返回.</p>

<p>这些工作就是你在输入 <code>make.left</code> 进行的全部工作, 它会返回一个 <code>MASConstraint</code>, 用于之后的继续配置.</p>

<h3 id="makeleftequalto80">make.left.equalTo(@80)</h3>

<p>在 <code>make.left</code> 返回 <code>MASConstraint</code> 之后, 我们会继续在这个链式的语法中调用下一个方法来指定约束的关系.</p>

<pre><code class="language-objectivec">// MASConstraint.h

- (MASConstraint * (^)(id attr))equalTo;
- (MASConstraint * (^)(id attr))greaterThanOrEqualTo;
- (MASConstraint * (^)(id attr))lessThanOrEqualTo;
</code></pre>

<p>这三个方法是在 <code>MASViewConstraint</code> 的父类, <code>MASConstraint</code> 中定义的.</p>

<p><code>MASConstraint</code> 是一个抽象类, 其中有很多的方法都<strong>必须在子类中覆写</strong>的. Masonry 中有两个 <code>MASConstraint</code> 的子类, 分别是 <code>MASViewConstraint</code> 和 <code>MASCompositeConstraint</code>. 后者实际上是一些<strong>约束的集合</strong>. 这么设计的原因我们会在 post 的最后解释.</p>

<p>先来看一下这三个方法是怎么实现的:</p>

<pre><code class="language-objectivec">// MASConstraint.m

- (MASConstraint * (^)(id))equalTo {
    return ^id(id attribute) {
        return self.equalToWithRelation(attribute, NSLayoutRelationEqual);
    };
}
</code></pre>

<p>该方法会导致 <code>self.equalToWithRelation</code> 的执行, 而这个方法是定义在子类中的, 因为父类作为抽象类没有提供这个方法的具体实现.</p>

<pre><code class="language-objectivec">// MASConstraint.m

- (MASConstraint * (^)(id, NSLayoutRelation))equalToWithRelation { MASMethodNotImplemented(); }
</code></pre>

<p><code>MASMethodNotImplemented</code> 也是一个宏定义, 用于在<strong>子类未继承这个方法</strong>或者<strong>直接使用这个类</strong>时抛出异常.</p>

<pre><code class="language-c">// MASConstraint.m

#define MASMethodNotImplemented() \
    @throw [NSException exceptionWithName:NSInternalInconsistencyException \
                                   reason:[NSString stringWithFormat:@"You must override %@ in a subclass.", NSStringFromSelector(_cmd)] \
                                 userInfo:nil]

</code></pre>

<p>因为我们为 <code>equalTo</code> 提供了参数 <code>attribute</code> 和布局关系 <code>NSLayoutRelationEqual</code>, 这两个参数会传递到 <code>equalToWithRelation</code> 中, 设置 <code>constraint</code> 的布局关系和 <code>secondViewAttribute</code> 属性, 为即将 maker 的 <code>install</code> 做准备.</p>

<pre><code class="language-objectivec">// MASViewConstraint.m

- (MASConstraint * (^)(id, NSLayoutRelation))equalToWithRelation {
    return ^id(id attribute, NSLayoutRelation relation) {
        if ([attribute isKindOfClass:NSArray.class]) { ... }
        else {
            ...
            self.layoutRelation = relation;
            self.secondViewAttribute = attribute;
            return self;
        }
    };
}
</code></pre>

<p>我们不得不提一下 <code>setSecondViewAttribute:</code> 方法, 它并不只是一个简单的 setter 方法, 它会根据你传入的值的种类赋值.</p>

<pre><code class="language-objectivec">// MASConstraintMaker.m

- (void)setSecondViewAttribute:(id)secondViewAttribute {
    if ([secondViewAttribute isKindOfClass:NSValue.class]) {
        [self setLayoutConstantWithValue:secondViewAttribute];
    } else if ([secondViewAttribute isKindOfClass:MAS_VIEW.class]) {
        _secondViewAttribute = [[MASViewAttribute alloc] initWithView:secondViewAttribute layoutAttribute:self.firstViewAttribute.layoutAttribute];
    } else if ([secondViewAttribute isKindOfClass:MASViewAttribute.class]) {
        _secondViewAttribute = secondViewAttribute;
    } else {
        NSAssert(NO, @"attempting to add unsupported attribute: %@", secondViewAttribute);
    }
}
</code></pre>

<p>第一种情况对应的就是:</p>

<pre><code class="language-objectivec">make.left.equalTo(@40);
</code></pre>

<p>传入 <code>NSValue</code> 的时, 会直接设置 <code>constraint</code> 的 <code>offset</code>, <code>centerOffset</code>, <code>sizeOffset</code>, 或者 <code>insets</code></p>

<p>第二种情况一般会直接传入一个视图:</p>

<pre><code class="language-objectivec">make.left.equalTo(view);
</code></pre>

<p>这时, 就会初始化一个 <code>layoutAttribute</code> 属性与 <code>firstViewArribute</code> 相同的 <code>MASViewAttribute</code>, 上面的代码就会使视图与 <code>view</code> 左对齐.</p>

<p>第三种情况会传入一个视图的 <code>MASViewAttribute</code>:</p>

<pre><code class="language-objectivec">make.left.equalTo(view.mas_right);
</code></pre>

<p>使用这种写法时, 一般是因为约束的方向不同. 这行代码会使视图的左侧与 <code>view</code> 的右侧对齐.</p>

<p>到这里我们就基本完成了对<strong>一个</strong>约束的配置, 接下来可以使用相同的语法完成对一个视图上所有约束进行配置, 然后进入了最后一个环节.</p>

<h2 id="install-masconstraintmaker">Install MASConstraintMaker</h2>

<p>我们会在 <code>mas_makeConstraints:</code> 方法的最后调用 <code>[constraintMaker install]</code> 方法来安装所有存储在 <code>self.constraints</code> 数组中的所有约束.</p>

<pre><code class="language-objectivec">// MASConstraintMaker.m

- (NSArray *)install {
    if (self.removeExisting) {
        NSArray *installedConstraints = [MASViewConstraint installedConstraintsForView:self.view];
        for (MASConstraint *constraint in installedConstraints) {
            [constraint uninstall];
        }
    }
    NSArray *constraints = self.constraints.copy;
    for (MASConstraint *constraint in constraints) {
        constraint.updateExisting = self.updateExisting;
        [constraint install];
    }
    [self.constraints removeAllObjects];
    return constraints;
}
</code></pre>

<p>在这个方法会先判断当前的视图的约束是否应该要被 <code>uninstall</code>, 如果我们在最开始调用 <code>mas_remakeConstraints:</code> 方法时, 视图中原来的约束就会全部被 <code>uninstall</code>.</p>

<p>然后就会遍历 <code>constraints</code> 数组, 发送 <code>install</code> 消息.</p>

<h3 id="masviewconstraint-install">MASViewConstraint install</h3>

<p>MASViewConstraint 的 <code>install</code> 方法就是最后为当前视图添加约束的最后的方法, 首先这个方法会先获取即将用于初始化 <code>NSLayoutConstraint</code> 的子类的几个属性.</p>

<pre><code class="language-objectivec">// MASViewConstraint.m

MAS_VIEW *firstLayoutItem = self.firstViewAttribute.view;
NSLayoutAttribute firstLayoutAttribute = self.firstViewAttribute.layoutAttribute;
MAS_VIEW *secondLayoutItem = self.secondViewAttribute.view;
NSLayoutAttribute secondLayoutAttribute = self.secondViewAttribute.layoutAttribute;
</code></pre>

<p>Masonry 之后会判断当前即将添加的约束是否是 size 类型的约束</p>

<pre><code class="language-objectivec">// MASViewConstraint.m

if (!self.firstViewAttribute.isSizeAttribute &amp;&amp; !self.secondViewAttribute) {
   secondLayoutItem = firstLayoutItem.superview;
   secondLayoutAttribute = firstLayoutAttribute;
}
</code></pre>

<p>如果不是 size 类型并且没有提供第二个 <code>viewAttribute</code>, (e.g. <code>make.left.equalTo(@10);</code>) 会自动将约束添加到 <code>superview</code> 上. 它等价于:</p>

<pre><code class="language-objectivec">make.left.equalTo(superView.mas_left).with.offset(10);
</code></pre>

<p>然后就会初始化 <code>NSLayoutConstraint</code> 的子类 <code>MASLayoutConstraint</code>:</p>

<pre><code class="language-objectivec">// MASViewConstraint.m

MASLayoutConstraint *layoutConstraint
   = [MASLayoutConstraint constraintWithItem:firstLayoutItem
                                   attribute:firstLayoutAttribute
                                   relatedBy:self.layoutRelation
                                      toItem:secondLayoutItem
                                   attribute:secondLayoutAttribute
                                  multiplier:self.layoutMultiplier
                                    constant:self.layoutConstant];
layoutConstraint.priority = self.layoutPriority;                                    
</code></pre>

<p>接下来它会寻找 <code>firstLayoutItem</code> 和 <code>secondLayoutItem</code> 两个视图的公共 <code>superview</code>, 相当于求两个数的最小公倍数.</p>

<pre><code class="language-objectivec">// View+MASAdditions.m

- (instancetype)mas_closestCommonSuperview:(MAS_VIEW *)view {
    MAS_VIEW *closestCommonSuperview = nil;

    MAS_VIEW *secondViewSuperview = view;
    while (!closestCommonSuperview &amp;&amp; secondViewSuperview) {
        MAS_VIEW *firstViewSuperview = self;
        while (!closestCommonSuperview &amp;&amp; firstViewSuperview) {
            if (secondViewSuperview == firstViewSuperview) {
                closestCommonSuperview = secondViewSuperview;
            }
            firstViewSuperview = firstViewSuperview.superview;
        }
        secondViewSuperview = secondViewSuperview.superview;
    }
    return closestCommonSuperview;
}
</code></pre>

<p>如果需要升级当前的约束就会获取原有的约束, 并替换为新的约束, 这样就不需要再次为 <code>view</code> 安装约束.</p>

<pre><code class="language-objectivec">// MASViewConstraint.m

MASLayoutConstraint *existingConstraint = nil;
if (self.updateExisting) {
   existingConstraint = [self layoutConstraintSimilarTo:layoutConstraint];
}
if (existingConstraint) {
   // just update the constant
   existingConstraint.constant = layoutConstraint.constant;
   self.layoutConstraint = existingConstraint;
} else {
   [self.installedView addConstraint:layoutConstraint];
   self.layoutConstraint = layoutConstraint;
}

[firstLayoutItem.mas_installedConstraints addObject:self];
</code></pre>

<p>如果原来的 <code>view</code> 中不存在可以升级的约束, 或者没有调用 <code>mas_updateConstraint:</code> 方法, 那么就会在上一步寻找到的 <code>installedView</code> 上面添加约束.</p>

<pre><code class="language-objectivec">[self.installedView addConstraint:layoutConstraint];
</code></pre>

<h2 id="其他问题">其他问题</h2>

<p>到现在为止整个 Masonry 为视图添加约束的过程就已经完成了, 然而我们还有一些待解决的其它问题.</p>

<h3 id="makeleftequalviewwithoffset30">make.left.equal(view).with.offset(30)</h3>

<p>我们在前面的讨论中已经讨论了这个链式语法的前半部分, 但是在使用中也会”延长”这个链式语句, 比如添加 <code>with</code> <code>offset</code>.</p>

<p>其实在 Masonry 中使用 <code>with</code> 并不是必须的, 它的作用仅仅是使代码更加的易读.</p>

<blockquote>
  <p>Optional semantic property which has no effect but improves the readability of constraint</p>
</blockquote>

<pre><code class="language-objectivec">// MASConstraint.m
- (MASConstraint *)with {
    return self;
}

- (MASConstraint *)and {
    return self;
}
</code></pre>

<p>与 <code>with</code> 有着相同作用的还有 <code>and</code>, 这两个方法都会直接返回 <code>MASConstraint</code>, 方法本身不做任何的修改.</p>

<p>而 <code>offset</code> 方法其实是修改 <code>layoutConstraint</code> 中的常量, 因为 <code>self.layoutConstant</code> 在初始化时会被设置为 0, 我们可以通过修改 <code>offset</code> 属性来改变它.</p>

<pre><code class="language-objectivec">// MASViewConstraint.m

- (void)setOffset:(CGFloat)offset {
    self.layoutConstant = offset;
}
</code></pre>

<h3 id="mascompositeconstraint">MASCompositeConstraint</h3>

<p><code>MASCompositeConstraint</code> 是一些 <code>MASConstraint</code> 的集合, 它能够提供一种更加便捷的方法同时为一个视图来添加多个约束.</p>

<blockquote>
  <p>A group of MASConstraint objects</p>
</blockquote>

<p>通过 <code>make</code> 直接调用 <code>edges</code> <code>size</code> <code>center</code> 时, 就会产生一个 <code>MASCompositeConstraint</code> 的实例, 而这个实例会初始化所有对应的单独的约束.</p>

<pre><code class="language-objectivec">// MASConstraintMaker.m

- (MASConstraint *)edges {
    return [self addConstraintWithAttributes:MASAttributeTop | MASAttributeLeft | MASAttributeRight | MASAttributeBottom];
}

- (MASConstraint *)size {
    return [self addConstraintWithAttributes:MASAttributeWidth | MASAttributeHeight];
}

- (MASConstraint *)center {
    return [self addConstraintWithAttributes:MASAttributeCenterX | MASAttributeCenterY];
}
</code></pre>

<p>这些属性都会调用 <code>addConstraintWithAttributes:</code> 方法, 生成多个属于 <code>MASCompositeConstraint</code> 的实例.</p>

<pre><code class="language-objectivec">// MASConstraintMaker.m

NSMutableArray *children = [NSMutableArray arrayWithCapacity:attributes.count];

for (MASViewAttribute *a in attributes) {
   [children addObject:[[MASViewConstraint alloc] initWithFirstViewAttribute:a]];
}

MASCompositeConstraint *constraint = [[MASCompositeConstraint alloc] initWithChildren:children];
constraint.delegate = self;
[self.constraints addObject:constraint];
return constraint;
</code></pre>

<h3 id="mas_equalto">mas_equalTo</h3>

<p>Masonry 中还有一个类似与 magic 的宏, 这个宏将 C 和 Objective-C 语言中的一些基本数据结构比如说 <code>double</code> <code>CGPoint</code> <code>CGSize</code> 这些值用 <code>NSValue</code> 进行包装.</p>

<p>这是一种非常简洁的使用方式, 如果你对这个非常感兴趣, 可以看一下 <code>MASUtilities.h</code> 中的源代码, 在这里就不对这个做出解释了.</p>

<h2 id="masonry-如何为视图添加约束面试回答">Masonry 如何为视图添加约束(面试回答)</h2>

<p>Masonry 与其它的第三方开源框架一样选择了使用分类的方式为 UIKit 添加一个方法 <code>mas_makeConstraint</code>, 这个方法接受了一个 block, 这个 block 有一个 <code>MASConstraintMaker</code> 类型的参数, 这个 maker 会持有一个<strong>约束的数组</strong>, 这里保存着所有将被加入到视图中的约束.</p>

<p>我们通过链式的语法配置 maker, 设置它的 <code>left</code> <code>right</code> 等属性, 比如说 <code>make.left.equalTo(view)</code>, 其实这个 <code>left</code> <code>equalTo</code> 还有像 <code>with</code> <code>offset</code> 之类的方法都会返回一个 <code>MASConstraint</code> 的实例, 所以在这里才可以用类似 Ruby 中链式的语法.</p>

<p>在配置结束后, 首先会调用 maker 的 <code>install</code> 方法, 而这个 maker 的 <code>install</code> 方法会遍历其持有的约束数组, 对其中的每一个约束发送 <code>install</code> 消息. 在这里就会使用到在上一步中配置的属性, 初始化 <code>NSLayoutConstraint</code> 的子类 <code>MASLayoutConstraint</code> 并添加到合适的视图上.</p>

<p>视图的选择会通过调用一个方法 <code>mas_closestCommonSuperview:</code> 来返回两个视图的<strong>最近公共父视图</strong>.</p>

<h2 id="总结">总结</h2>

<p>虽然 Masonry 这个框架中的代码并不是非常的多, 只有 1,2 万行的代码, 但是感觉这个项目阅读起来十分的困难, 没有 SDWebImage 清晰, 因为代码中类的属性非常的多, 而且有很多相似的属性会干扰我们对这个项目的阅读, 整个框架运用了大量的 block 语法进行回调.</p>

<p>虽然代码十分整洁不过我觉得却降低了可读性, 但是还是那句话, 把简洁留给别人复杂留给自己, 只要为开发者提供简洁的接口就可以了.</p>

  ]]></description>
</item>


  </channel>
</rss>
