<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    
    <title>nju520.me</title>
    
    <link>http://localhost:4000</link>
    <description>nju520's Blog</description>
    <language>en-uk</language>
    <managingEditor> nju520</managingEditor>
    <atom:link href="rss" rel="self" type="application/rss+xml" />
    
<item>
  <title>2017 年总结 - 写在转职后的一个月</title>
  <link>//2017-summary</link>
  <author>nju520</author>
  <pubDate>2017-12-27T00:00:00+08:00</pubDate>
  <guid>//2017-summary</guid>
  <description><![CDATA[
  <p>一直以来都很少写这些比较软性的文章，一方面觉得没有太多可以写的事情，另一方面觉得写这种博客对读者来说没有太大的价值，不过作者在今天还是想对过去的 2017 年进行简单的总结，让自己更加清楚这一年有哪些的变化。</p>

<h2 id="年度总结">年度总结</h2>

<p>在今年年初的时候曾经定下了两个非常简单的计划：看 30 本书、完成 20 篇博客；前者是一个输入的过程，后者是输出的过程，这种可以量化的指标比较容易记录，对于完成与否也有一个确切的答案。</p>

<p><img src="https://img.nju520.me/2017-12-27-2017-plan.png" alt="2017-plan" /></p>

<p>今年的计划大体来看完成度还是比较高的，如果算上这篇总结今年总共写了 35 篇博客，也阅读了 23 本书籍，对于博客来说确实超额完成了任务，不过现在看来每年读 30 本书确实是一件比较困难的事情。</p>

<p>作为软件工程师，在日常学习或者工作的时候，我们阅读的很多资料都来自于一些网站以及官方文档，有的文档的长度跟一本书也是差不了多少的，但是它并不是一本书；除此之外，阅读的很多论文也不属于这个类别，所以在制定 18 年的计划时可能会对这一部分进行简单的调整。</p>

<h2 id="毕业">毕业</h2>

<p>2017 年是作者毕业的年份，从 7 月份毕业、8 月份入职到现在算了一下大概有 5 个月的时间，相比起在学校每天还要担心被哪个老师点名来说，上班的日子规律了不少，每天早起学习、上班、回家再学习、睡觉，毕业之后的生活确实比还在学校时简单了很多。</p>

<p>不过生活虽然变得简单，但是业余时间相比大学的时候确实少了一些，与之前每时每刻不是在学习或者就是在划水不同，在公司的时候还有工作需要处理，由于公司对于项目的可用性和完成情况有着比较高的要求，这会迫使我们去解决很多问题并思考很多边界条件。</p>

<p>如果有人问我『大学毕业是一种什么样的体验？』的话，从我个人的经历和体验来看还是利大于弊的，虽然失去了一些选择的自由，提高了改变的成本，不过收获了更大的自由，同时也意味着自己要对做出的决定负责任。</p>

<h2 id="技术栈的改变">技术栈的改变</h2>

<p>之前还是有一些人看到最近发的博客，会发私信或者在微博下面留言问『目前主要在做什么工作？』，其实今年 2~4 月份的时候是最后一段写 iOS 的时间，在这之后一直都在学习并且从事着服务端开发的工作，毕业之后开始写 Ruby on Rails，而最近的一段时间由于工作上的变动逐渐将技术栈转移到了 Java 上。</p>

<p><img src="https://img.nju520.me/2017-12-27-java-logo.png" alt="java-logo" /></p>

<p>对于我个人来说，改变当前的技术栈到服务端是一件比较自然的事情，从开始学习 iOS 开发到现在也有将近 4 年的时间了，虽然对这个领域说不上『精通』，但是还算得上『熟练掌握』。由于编译器、图像处理、音视频处理以及机器学习相关的事情我还不是特别感兴趣，所以总是感觉自己在同一个领域内做重复的工作，导致我对编程这件事情失去了一些兴趣，这是我不愿意看到的，所以才会选择做出这个改变，开始在新的领域尝试新的东西。</p>

<p>在这个领域中，我发现了很多新鲜、好玩的事情，包括网络、数据库、分布式系统等等，虽然我用 Rails 到现在已经快三年了，但是真正<strong>深入</strong>了解这个领域的各种知识还是从来没有过的，服务端的新知识对于我来说都很有意思，也更有挑战，所以未来的一段时间可能都会在这个领域中继续学习。</p>

<h2 id="社交平台与博客">社交平台与博客</h2>

<p>去年年末开始用 <a href="https://weibo.com/u/5123574960">微博</a> 发一些平时写的博客到现在也差不多过去一年了，感谢各位读者和<strong>某粉丝群</strong>里各位大佬的支持和转发，现在微博也有 2000 多的粉丝。</p>

<p>博客的访问量跟年初相比提高了 10 倍左右，其中一大部分原因还是之前博客确实没什么访问量，其余的就是总结出了一套排版和制图的规则，写博客的这几年的时间非常明显地提升了表达想法并且梳理思路的能力。</p>

<p>今年总共写了 30 多篇博客，前半年由于还在学校，同时为了毕业，一直在写一篇跟 MVC 相关的论文，所以很多博客都与 iOS 开发有关；六、七月份发的几篇博客其实都出自毕设论文的不同章节，这四篇博客从开始写到发布花了将近 4 个月的时间，这几篇中最满意的还是 <a href="http://hwbnju.com/mvx">浅谈 MVC、MVP 和 MVVM 架构模式</a>，写这篇文章的时候确实花费了非常多的时间，参考了很多的资料，就是为了避免在这种关键问题上误导别人。</p>

<p><img src="https://img.nju520.me/2017-12-27-MVC-MVVM-MVP.jpg" alt="MVC-MVVM-MVP" /></p>

<p>下半年写的文章都与服务端有关，作者对于其中的大多数文章都是非常满意的，尤其是下面的几篇文章：</p>

<blockquote>
  <p>简单看了下，真的不满意的文章非常少，不过这里实在是放不下更多的链接。</p>
</blockquote>

<ul>
  <li><a href="http://hwbnju.com/consensus">分布式一致性与共识算法</a></li>
  <li><a href="http://hwbnju.com/docker">Docker 核心技术与实现原理</a></li>
  <li><a href="http://hwbnju.com/metaprogramming">谈元编程与表达能力</a></li>
  <li><a href="http://hwbnju.com/mysql-innodb">『浅入浅出』MySQL 和 InnoDB</a></li>
  <li><a href="http://hwbnju.com/mongodb-to-mysql">如何从 MongoDB 迁移到 MySQL</a></li>
  <li>…</li>
</ul>

<p>在这几篇文章中 <a href="http://hwbnju.com/metaprogramming">谈元编程与表达能力</a> 讲了一些我个人对于元编程的看法和理解；<a href="http://hwbnju.com/consensus">分布式一致性与共识算法</a> 是我在学习区块链技术的时候写的，无论是在学习的过程中还是从最后的阅读量来看，作者还是觉得挺满意的；最后的 <a href="http://hwbnju.com/docker">Docker 核心技术与实现原理</a> 应该是今年阅读量最高的一篇博客了，发布至今不到一个月的时间，这篇文章的阅读量就能达到 3w 以上，这是作者万万没有想到的。</p>

<h2 id="技术成长">技术成长</h2>

<p>从年初到现在，确实涉猎的技术类型非常广，上半年因为要处理很多与毕业相关的事情，在技术广度上并没有太多的成长，只是看了一下 ReactiveCocoa 的源代码，总结了一下客户端的多种架构模式。</p>

<p>在 7 月份至今的一段时间内，基本每天都在学习新的知识与技术，刚刚入职的一段时间定下了一个比较简单的目标，也就是半年内充分了解数据库的相关知识，包括 MySQL、MongoDB 的使用和存储引擎，事务、索引设计等知识，在这期间看了很多相关书籍；在学习数据库的过程中发现了分布式领域有很多有意思的事情，阅读了一些相关的论文包括 Google 出品的 MapReduce、Bigtable、GFS 还有 Amazon 的 DynamoDB 等等，到目前来看这个短期计划的完成情况还是比较令我满意的。</p>

<p><img src="https://img.nju520.me/2017-12-27-database.jpg" alt="database" /></p>

<p>除此之外，由于工作和技术栈的改变，阅读了一些 Java 相关的一些书籍和文档，在这里不得不说一句 Java 的生态环境实在是太过于庞大了，而且生态中的开发者是一群非常喜欢创造概念的人。在学习 Spring 的过程中，我也更加清楚 Rails 的出现究竟解决了什么样的问题，同时<strong>约定大于配置</strong>确实是一种更加高效实用的思想，这一思想也催化了 Spring Boot 的出现，简化了 Spring 生态的使用和了解成本，但即使是这样 Java 生态中也有非常多的技术需要学习和理解。</p>

<p>比特币和区块链是今年非常热门的词汇，但是目前大多数人只是为了投机才参与到加密货币的买卖中，研究区块链技术的人其实比较少，不过这些技术确实非常有趣，作者最近也在研究区块链作为一个分布式系统使用了哪些技术才实现了去中心化、不可篡改等特性。</p>

<p><img src="https://img.nju520.me/2017-12-27-blockchain.jpg" alt="blockchain" /></p>

<h2 id="总结与规划">总结与规划</h2>

<p>从年初到现在的变化还是非常大的，几个月前还在学校准备毕业答辩，而现在已经工作了几个月，技术栈和方向相比于一年前也有比较大的改变，在未来的一段时间内还是会继续学习后端的知识，而业余时间也会了解一下区块链的相关技术。</p>

<p>回想一下从学习编程最开始每天吐槽 Java 的臃肿和繁琐，到现在日常跟 Java 打交道，学习它各种复杂的 API 和开源框架的使用，我只能说一句『善恶终有报，天道好轮回』。</p>

  ]]></description>
</item>

<item>
  <title>自动初始化 Gitalk 和 Gitment 评论</title>
  <link>//git-comments-initialize</link>
  <author>nju520</author>
  <pubDate>2017-10-28T00:00:00+08:00</pubDate>
  <guid>//git-comments-initialize</guid>
  <description><![CDATA[
  <p>之前的博客一直都使用 Disqus 作为评论系统，然后因为 Disqus 在国内无法访问，很多读者都只能通过邮件的方式咨询一些问题，昨天觉得长痛不如短痛，直接将博客的评论迁移到了 <a href="https://github.com/gitalk/gitalk">Gitalk</a>，最开始选择了使用 Gitment 作为评论系统，但是由于其开发者很久没有维护、代码七个月也没有更新，所以就选择了有更多人维护的 Gitalk 作为目前博客的评论系统。</p>

<p>无论是 Gitalk 还是 Gitment 都只能手动初始化所有文章的评论或者一个一个点开界面，作者觉得这件事情非常麻烦，所以手动抓了一下 Gitalk 和 Gitment 在初始化评论时发出的网络请求后写了一个用于自动化初始评论的脚本。</p>

<h2 id="获得权限">获得权限</h2>

<p>在使用该脚本之前首先要在 GitHub 创建一个新的 <a href="https://github.com/settings/tokens">Personal access tokens</a>，选择 <code>Generate new token</code> 后，在当前的页面中为 Token 添加所有 Repo 的权限：</p>

<p><img src="https://img.nju520.me/2017-10-28-personal-access-token.png" alt="personal-access-token" /></p>

<p>在这里创建之后，点击界面最下的面 <code>Generate token</code> 按钮获得一个新的 token：</p>

<p><img src="https://img.nju520.me/2017-10-28-new-token.png" alt="new-token" /></p>

<blockquote>
  <p>作者已经把这个 token 删掉了，不要想着用这个 token 就能获得到作者 GitHub 的权限。</p>
</blockquote>

<h2 id="自动化脚本">自动化脚本</h2>

<p>作者在抓取了 Gitalk 和 Gitment 的 API 请求发现，这两个评论服务是<strong>通过 GitHub 提供的 API 创建含有相应标签的 issue</strong>，所以我们应该也可以直接使用 GitHub 的 API 创建所有博客文章对应的 issue，这与通过评论插件创建 issue 是完全一样的，在创建之后无论是 Gitalk 还是 Gitment 都可以通过对应的标签直接在仓库中找到对应的 issue 了。</p>

<p>本文中提供的自动化脚本使用的是 Ruby 代码，请确定自己的机器上已经安装了 Ruby，并且使用如下的命令安装脚本所需要的所有依赖：</p>

<pre><code class="language-ruby">$ sudo gem install faraday activesupport sitemap-parser
</code></pre>

<h3 id="使用-sitemap-文件">使用 sitemap 文件</h3>

<p>如果我们使用的博客服务是 Jekyll，那么就可以通过 <a href="https://github.com/jekyll/jekyll-sitemap">jekyll-sitemap</a> 插件为博客创建对应的 sitemap 文件，例如：http://hwbnju.com/sitemap.xml。</p>

<p>有 sitemap 文件之后就非常好办了，在任意目录下创建 <code>comment.rb</code> 文件后，将下面的代码粘贴到文件中：</p>

<pre><code class="language-ruby">username = "nju520" # GitHub 用户名
new_token = "xxxxxxx"  # GitHub Token
repo_name = "github-comments-repo" # 存放 issues
sitemap_url = "http://hwbnju.com/sitemap.xml" # sitemap
kind = "Gitalk" # "Gitalk" or "gitment"

require 'open-uri'
require 'faraday'
require 'active_support'
require 'active_support/core_ext'
require 'sitemap-parser'

sitemap = SitemapParser.new sitemap_url
urls = sitemap.to_a

conn = Faraday.new(:url =&gt; "https://api.github.com/repos/#{username}/#{repo_name}/issues") do |conn|
  conn.basic_auth(username, token)
  conn.adapter  Faraday.default_adapter
end

urls.each_with_index do |url, index|
  title = open(url).read.scan(/&lt;title&gt;(.*?)&lt;\/title&gt;/).first.first.force_encoding('UTF-8')
  response = conn.post do |req|
    req.body = { body: url, labels: [kind, url], title: title }.to_json
  end
  puts response.body
  sleep 15 if index % 20 == 0
end
</code></pre>

<p>在这里有 5 个配置项，分别是 GitHub 用户名、在上一步获得的 Token、存放 issues 的仓库、sitemap 的地址以及最后你在博客中使用了哪个评论插件，不同的插件拥有标签，可以选择 <code>"Gitalk"</code> 或者 <code>"gitment"</code>，对于其他评论的插件应该如何设置，作者就并不清楚了。</p>

<blockquote>
  <p>需要注意的是，在使用上述的代码为博客创建 issue 时，会为博客中 sitemap 包含的<strong>全部界面创建对应的 issue</strong>，其中包括例如首页、标签界面等，这对于作者来说不是太大的问题，但是对这个问题敏感的读者可以使用下一小节中的代码。</p>
</blockquote>

<p>在配置完成后就可以在命令行中的当前目录下输入以下命令：</p>

<pre><code class="language-ruby">$ ruby comment.rb
</code></pre>

<p>然后当前脚本就会运行并初始化所有的评论了。</p>

<h3 id="无-sitemap-或自定义">无 sitemap 或自定义</h3>

<p>如果博客中不包含任何的 sitemap 文件，或者想要手动选择想要初始化的一些文章其实也是可以的，可以使用简化的代码<strong>批量初始化指定博客</strong>的评论：</p>

<pre><code class="language-ruby">username = "nju520" # GitHub 用户名
new_token = "xxxxxxx"  # GitHub Token
repo_name = "github-comments-repo" # 存放 issues
kind = "Gitalk" # "Gitalk" or "gitment"
urls = ["xxxxx"]

require 'open-uri'
require 'faraday'
require 'active_support'
require 'active_support/core_ext'

conn = Faraday.new(:url =&gt; "https://api.github.com/repos/#{username}/#{repo_name}/issues") do |conn|
  conn.basic_auth(username, token)
  conn.adapter  Faraday.default_adapter
end

urls.each_with_index do |url, index|
  title = open(url).read.scan(/&lt;title&gt;(.*?)&lt;\/title&gt;/).first.first.force_encoding('UTF-8')
  response = conn.post do |req|
    req.body = { body: url, labels: [kind, url], title: title }.to_json
  end
  puts response.body
  sleep 15 if index % 20 == 0
end
</code></pre>

<p>在这里就需要<strong>手动填入需要初始化文章的数组</strong>了，当然如果你有 sitemap 文件，其实可以在 irb 中运行以下的代码得到全部的文章数组，再手动从其中剔除不想要创建评论的页面：</p>

<pre><code class="language-ruby">$ irb
2.3.3 :001 &gt; require 'sitemap-parser'
 =&gt; true
2.3.3 :002 &gt; sitemap_url = "http://hwbnju.com/sitemap.xml"
 =&gt; "http://hwbnju.com/sitemap.xml"
2.3.3 :003 &gt; SitemapParser.new(sitemap_url).to_a
 =&gt; ["http://hwbnju.com/prolog-ji-chu-1", "http://hwbnju.com/prolog-pi-pei-2", "http://hwbnju.com/prolog-di-gui-3", ..., "http://hwbnju.com/dynamo"]
</code></pre>

<p>当我们将上述结果中不想要创建评论的文章删除之后，将结果填到 <code>urls</code> 这个临时变量中，运行下面的命令就可以了。</p>

<pre><code class="language-ruby">$ ruby comment.rb
</code></pre>

<h2 id="其他">其他</h2>

<p>由于 GitHub 会脚本的请求会做一定的限制，所以在连续请求接口，批量创建 issues 的过程中可能会出现创建失败的情况，你可以通过命令中打印的结果看到，不过在脚本中已经在每 20 次创建时休眠 15 秒，所以应该也不会遇到这个问题。</p>

<p>另外，GitHub 中 issue 的可以创建但是并不能删除，所以在配置时请一定检查好所有的配置项是否正确，否则会批量创建一些无用的 issue 虽然没有什么影响，但是看起来非常头疼。</p>

<h2 id="总结">总结</h2>

<p>手动初始化每一篇文章的评论确实是非常痛苦的，放弃 Disqus 确实也考虑了比较久的事件，Disqus 中也确实有一些有价值的评论，但是本着长痛不如短痛的原则，还是选择迁移到 Gitalk，当然作者也希望 Gitalk 官方能够提供更好地使用体验。</p>


  ]]></description>
</item>


  </channel>
</rss>
