<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    
    <title>hwbnju.com</title>
    
    <link>http://hwbnju.com</link>
    <description>nju520's Blog</description>
    <language>en-uk</language>
    <managingEditor> nju520</managingEditor>
    <atom:link href="rss" rel="self" type="application/rss+xml" />
    
<item>
  <title>JavaScript 深入理解 执行上下文</title>
  <link>//javascript-execution-content</link>
  <author>nju520</author>
  <pubDate>2017-05-12T00:00:00+08:00</pubDate>
  <guid>//javascript-execution-content</guid>
  <description><![CDATA[
  <h2 id="什么是执行上下文执行环境">什么是执行上下文(执行环境)</h2>

<p>每次当控制器转到JS可执行代码的时候，就会进入到一个执行上下文。
“执行上下文”就是 <strong>当前代码的运行环境或者作用域</strong>。</p>

<p>javascript中代码运行环境分为三种:</p>
<ul>
  <li>全局级别的代码: 这个是默认的代码运行环境， 一旦代码被载入，javascript引擎最先进入的就是这个全局环境</li>
  <li>函数级别的代码: 当执行一个函数时， 运行函数体的代码</li>
  <li>eval的代码: 在eval函数内运行的代码</li>
</ul>

<p>下图示例包含了全局和函数级别的执行上下文:
<img src="&quot;execution_context.png&quot;" alt="execution_context" /></p>

<p>上图一共有四个执行上下文。从外至内分别是全局执行上下文，person函数内的上下文，firstName函数和lastName函数的执行上下文。
PS: 不管什么情况下， 只存在一个全局的上下文， 该上下文能被任何其他的上下文所访问到。也就是说，我们可以在person的上下文中访问到全局上下文的sayHello变量，在firstName或者lastName中同样可以访问到该变量。</p>

<p>函数上下文的个数是没有限制的。每当调用一个函数时，引擎就会自动新建出一个函数上下文.换句话说，就是新建一个局部作用域，可以在该局部作用域中声明变量等，在外部的上下文中无法访问到该局部作用域内的元素.</p>

<h2 id="执行上下文堆栈">执行上下文堆栈</h2>

<p>在浏览器中，javascript引擎的工作方式是单线程的，也就是说某一个时刻只有唯一的一个事件是被激活处理的， 其他的事件被放到队列中，等待处理。
<img src="&quot;context_stack.jpg&quot;" alt="context stack" /></p>

<ul>
  <li>
    <p>当javascript代码文件被浏览器载入后，默认最新进入的就是全局的执行上下文.</p>
  </li>
  <li>
    <p>当在全局上下文中调用调用一个函数时，程序流就进入该被调用函数内，此时引擎就会为该函数创建一个新的执行上下文，并且将其压入到执行上下文堆栈的顶部。</p>
  </li>
  <li>
    <p>如果调用当前函数内部的其他函数, 程序流就会进入内部函数, 并且创建一个新的执行上下文并将其将入执行栈的顶部.</p>
  </li>
  <li>
    <p>浏览器总是执行当前在堆栈顶部的上下文. 一旦执行完毕，该上下文就会从堆栈顶部被弹出。然后进入其下的上下文执行代码。</p>
  </li>
  <li>
    <p>这样堆栈中的上下文就会依次执行并且弹出堆栈，直到回到全局的上下文。</p>
  </li>
</ul>

<h2 id="执行上下文的建立过程">执行上下文的建立过程</h2>

<p><strong>每当调用一个函数时，一个新的执行上下文就会被创建出来</strong>。
在javascript引擎内部，这个上下文的创建过程具体分为两个阶段:</p>

<ol>
  <li>建立阶段(发生在当调用一个函数时，但是在执行函数体内的具体代码之前)
    <ul>
      <li>建立变量，函数，arguments 对象，参数</li>
      <li>建立作用域链(什么是作用域链)</li>
      <li>确定this的值</li>
    </ul>
  </li>
  <li>代码执行阶段:
    <ul>
      <li>变量赋值，函数引用，执行其他代码</li>
    </ul>
  </li>
</ol>

<p>实际上，到此为止，执行上下文还是有点抽象，可以把执行上下文看作一个对象，该对象包含以下三个属性:</p>

<pre><code class="language-javascript">executionContextObj = {
  //变量对象
  variableObject: {/*函数中的arguments对象，函数参数，内部的变量以及函数声明*/}

  //作用域链
  scopeChain: {/*variableObject以及所有父执行上下文中的variableObject*/}

  //执行上下文绑定的对象，这个对象和上下文对象是不一样的
  //绑定的对象具体是什么，放到this章节去阐述
  //如果不采用apply call bind new,this绑定就只有两种情况
  //1.当函数作为某个对象的属性调用时，比如obj.foo(),此时this就绑定到obj对象上
  //2. 当函数不采用任何修饰直接调用时，比如foo(),此时this就绑定到全局对象上(非限制模式下)
  this: {..}
}

</code></pre>
<h3 id="建立阶段以及代码执行阶段">建立阶段以及代码执行阶段</h3>

<p>执行上下文对象(上面的executionContextObj)是在函数被调用时，但是在函数体被真正执行以前所创建的。</p>

<p>函数被调用时，就是上述的第一个阶段–建立阶段。这个时间内，引擎会检查函数中的参数，声明的变量以及内部函数，然后基于这些信息建立<strong>执行上下文对象</strong>。在这个阶段，variableObject对象，作用域链，this所指向的对象都会被确定。</p>

<p>过程如下：</p>
<ol>
  <li>
    <p>找到当前上下文中的调用函数的代码</p>
  </li>
  <li>
    <p>在执行被调用的函数体中的代码以前，开始创建执行上下文对象</p>
  </li>
  <li>
    <p>进入第一个阶段-建立阶段:</p>
    <ul>
      <li>建立variableObject对象:</li>
    </ul>
    <ol>
      <li>建立arguments对象，检查当前上下文中的参数，建立该对象下的属性以及属性值</li>
      <li>检查当前上下文中的函数声明：
每找到一个函数声明，就在variableObject下面用函数名建立一个属性，属性值就是指向该函数在内存中的地址的一个引用。如果上述函数名已经存在于variableObject下，那么对应的属性值会被新的引用所覆盖。</li>
    </ol>
  </li>
</ol>

<ul>
  <li>
    <p>初始化作用域链
variableObject以及所有父执行上下文中的variableObject构成作用域链</p>
  </li>
  <li>
    <p>确定上下文中this的指向对象</p>
  </li>
</ul>

<ol>
  <li>代码执行阶段:
    <ul>
      <li>执行函数体中的代码，一行一行地运行代码，给variableObject中的变量属性赋值。</li>
    </ul>
  </li>
</ol>

<hr />
<p>解释器执行代码的伪逻辑</p>

<p>1、查找调用函数的代码。</p>

<p>2、执行代码之前，先进入创建上下文阶段：
初始化作用域链</p>

<p>创建变量对象：</p>

<p>创建arguments对象，检查上下文，初始化参数名称和值并创建引用的复制。</p>

<p>扫描上下文的函数声明（而非函数表达式）：
    为发现的每一个函数，在变量对象上创建一个属性——确切的说是函数的名字——其有一个指向函数在内存中的引用。如果函数的名字已经存在，引用指针将被重写。</p>

<p>扫描上下文的变量声明：
    为发现的每个变量声明，在变量对象上创建一个属性——就是变量的名字，并且将变量的值初始化为undefined.如果变量的名字已经在变量对象里存在，将不会进行任何操作并继续扫描。</p>

<p>求出上下文内部“this”的值。</p>

<p>3、激活/代码执行阶段：</p>

<p>在当前上下文上运行函数代码，并随着代码一行行执行指派变量的值。</p>

<hr />
<h4 id="具体实例">具体实例</h4>

<pre><code class="language-javascript">function foo(i) {
  var a = "hello";
  var b = function privateB() {
    console.log("hehe");
  };

  function c() {
    console.log("c");
  }
}

foo(100);

</code></pre>
<p>在调用foo(100)的时候，建立阶段如下：</p>

<pre><code class="language-javascript">fooExecutionContext = {
  variableObject: {
    arguments: {
      0: 100,
      length: 1
    },
    i: 100,
    c: pointer to function c() {},
    a: undefined,
    b: undefined
  },

  scopeChain: {...},
  this: {...}
}

</code></pre>

<p>在建立阶段，除了arguments,函数的声明，以及传入的参数被赋予了具体的属性值，其他的默认都是undefined.一旦建立阶段结束，引擎就会进入代码执行阶段，代码执行阶段运行完毕后，上下文对象如下:</p>
<pre><code class="language-javascript">fooExecutionContext = {
  variableObject: {
    arguments: {
      0: 100,
      length: 1
    },
    i: 100,
    c: pointer to function c() {},
    a: "hello",
    b: pointer to function privateB()
  },

  scopeChain: {...},
  this: {...}
}
//从上面可以看出，只有在代码执行阶段，变量属性才会被赋予具体的值
</code></pre>

<h2 id="局部变量作用域提升的原因">局部变量作用域提升的原因</h2>

<p><strong>在函数中声明的变量以及函数，其作用域会提升到函数顶部。也就是说，一进入函数体，就可以访问到其中声明的变量和函数</strong></p>

<pre><code class="language-javascript">(function() {
  console.log(typeof foo); // function pointer
  console.log(typeof bar); // undefined

  var foo = "hello",
      bar = function() {return "world";};

  function foo() {
    return "hello";
  }

  console.log(foo); //hello
  console.log(foo());// error, foo is not a funciton
}())
</code></pre>
<p>上述为一个立即执行的匿名函数，通过()强制执行。我们知道这时候就会有执行上下文被创建。</p>

<ol>
  <li>
    <p>上下文的建立阶段，先处理arguments,传入的参数，接着是函数的声明，最后是变量的声明。</p>
  </li>
  <li>
    <p>因为函数的声明会早于变量的声明处理，因此当引擎发现foo函数的什么时就会在variableObject下面建立一个foo属性，其值是一个指向函数的引用。当引擎处理变量声明的时候，发现有var foo的声明，可以foo已经被声明过，所以此声明直接跳过。</p>
  </li>
  <li>
    <p>为什么bar是undefined呢？因为在建立阶段，被赋予的默认值就是undefined，它只会在代码执行阶段才会被赋予具体的值。</p>
  </li>
  <li>
    <p>当进入代码执行阶段的时候，就可以访问到foo属性了。但是注意一点，如果我们在最后打印foo变量，发现foo为”hello”,而不是函数。因为虽然函数声明早于变量的声明，但是变量的赋值是可以覆盖之前的值。所以 foo = “hello”就会覆盖foo变量的值，最终foo为字符串而不是一个函数</p>
  </li>
</ol>

<h2 id="关于this">关于this</h2>

<p>函数执行时this的指向问题放到下一个文章具体阐述。</p>

  ]]></description>
</item>


  </channel>
</rss>
