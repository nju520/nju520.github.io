<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    
    <title>nju520.me</title>
    
    <link>http://localhost:4000</link>
    <description>nju520's Blog</description>
    <language>en-uk</language>
    <managingEditor> nju520</managingEditor>
    <atom:link href="rss" rel="self" type="application/rss+xml" />
    
<item>
  <title>MySQL 索引性能分析概要</title>
  <link>//sql-index-performance</link>
  <author>nju520</author>
  <pubDate>2017-09-16T00:00:00+08:00</pubDate>
  <guid>//sql-index-performance</guid>
  <description><![CDATA[
  <p>上一篇文章 <a href="http://nju520.me/sql-index-intro.html">MySQL 索引设计概要</a> 介绍了影响索引设计的几大因素，包括过滤因子、索引片的宽窄与大小以及匹配列和过滤列。在文章的后半部分介绍了 <a href="https://www.amazon.cn/图书/dp/B00ZH27RH0">数据库索引设计与优化</a> 一书中，理想的三星索引的设计流程和套路，到目前为止虽然我们掌握了单表索引的设计方法，但是却没有分析预估索引耗时的能力。</p>

<p><img src="https://img.nju520.me/2017-09-16-Proactive-Index-Design.jpg-1000width" alt="Proactive-Index-Design" /></p>

<p>在本文中，我们将介绍书中提到的两种分析索引性能的方法：基本问题法（BQ）和快速估算上限法（QUBE），这两种方法能够帮助我们快速分析、估算索引的性能，及时发现问题。</p>

<h2 id="基本问题法">基本问题法</h2>

<p>当我们需要考虑对现有的 SELECT 查询进行分析时，哪怕没有足够的时间，也应该使用基本问题法对查询进行评估，评估的内容非常简单：现有的索引或者即将添加的索引是否包含了 WHERE 中使用的全部列，也就是对于当前查询来说，是否有一个索引是半宽索引。</p>

<p><img src="https://img.nju520.me/2017-09-16-Semifat-Index-and-Fat-Index.jpg-1000width" alt="Semifat-Index-and-Fat-Index" /></p>

<p>在上一篇文章中，我们介绍过宽索引和窄索引，窄索引 (username) 其实就叫做半宽索引，其中包含了 WHERE 中的全部的列 username，当前索引的对于该查询只有一颗星，它虽然避免了无效的回表查询造成的随机 IO，但是如果当前的索引的性能仍然无法满足需要，就可以添加 age 将该索引变成宽索引 (username, age) 以此来避免回表访问造成的性能影响；对于上图中的简单查询，索引 (username, age) 其实已经是一个三星索引了，但是对于包含 ORDER BY 或者更加复杂的查询，(username, age) 可能就只是二星索引：</p>

<p><img src="https://img.nju520.me/2017-09-16-Complicated-Query-with-Order-By.jpg-1000width" alt="Complicated-Query-with-Order-By" /></p>

<p>在这时如果该索引仍然不能满足性能的需要，就可以考虑按照上一篇文章 <a href="http://nju520.me/sql-index-intro.html">MySQL 索引设计概要</a> 中提供的索引设计方法重新设计了。</p>

<blockquote>
  <p>虽然基本问题法能够快速解决一些由于索引造成的问题，但是它并不能保证足够的性能，当表中有 (city, username, age) 索引，谓词为 <code>WHERE username="nju520" AND age="21"</code> 时，使用基本问题法并不能得出正确的结果。</p>
</blockquote>

<h2 id="快速估算上限法">快速估算上限法</h2>

<p>基本问题法非常简单，它能够最短的时间内帮助我们评估一个查询的性能，但是它并不能准确地反映一个索引相关的性能问题，而快速估算上限法就是一种更加准确、复杂的方法了；其目的在于在程序开发期间就能将访问路径缓慢的问题暴露出来，这个估算方法的输出就是本地响应时间（Local Response Time）：</p>

<p><img src="https://img.nju520.me/2017-09-16-QUBE-LRT.jpg-1000width" alt="QUBE-LRT" /></p>

<p>本地响应时间就是查询在数据库服务器中的耗时，不包括任何的网络延迟和多层环境的通信时间，仅包括执行查询任务的耗时。</p>

<h3 id="响应时间">响应时间</h3>

<p>本地响应时间等于服务时间和排队时间的总和，一次查询请求需要在数据库中等待 CPU 以及磁盘的响应，也可能会因为其他事务正在对同样的数据进行读写，导致当前查询需要等待锁的获取，不过组成响应时间中的主要部分还是磁盘的服务时间：</p>

<p><img src="https://img.nju520.me/2017-09-16-Local-Response-Time.jpg-1000width" alt="Local-Response-Time" /></p>

<p>QUBE 在计算的过程中会忽略除了磁盘排队时间的其他排队时间，这样能够简化整个评估流程，而磁盘的服务时间主要还是包括同步读写以及异步读几个部分：</p>

<p><img src="https://img.nju520.me/2017-09-16-Disk-Service-Time.jpg-1000width" alt="Disk-Service-Time" /></p>

<p>在排除了上述多个部分的内容，我们得到了一个非常简单的估算过程，整个估算时间的输入仅为随机读和顺序读以及数据获取的三个输入，而它们也是影响查询的主要因素：</p>

<p><img src="https://img.nju520.me/2017-09-16-Local-Response-Time-Calculation.jpg-1000width" alt="Local-Response-Time-Calculation" /></p>

<p>其中数据获取的过程在比较不同的索引对同一查询的影响是不需要考虑的，因为同一查询使用不同的索引也会得到相同的结果集，获取的数据也是完全相同的。</p>

<h3 id="访问">访问</h3>

<p>当 MySQL 读取一个索引行或者一个表行时，就会发生一次访问，当使用全表扫描或者扫描索引片时，读取的第一个行就是随机访问，随机访问需要磁盘进行寻道和旋转，所以其代价巨大，而接下来顺序读取的所有行都是通过顺序访问读取的，代价只有随机访问的千分之一。</p>

<p>如果大量的顺序读取索引行和表行，在原理上可能会造成一些额外的零星的随机访问，不过这对于整个查询的估算来说其实并不重要；在计算本地响应时间时，仍然会把它们当做顺序访问进行估算。</p>

<h3 id="示例">示例</h3>

<p>在这里，我们简单地举一个例子来展示如何计算查询在使用某个索引时所需要的本地响应时间，假设我们有一张 <code>users</code> 表，其中有一千万条数据：</p>

<p><img src="https://img.nju520.me/2017-09-16-User-Table.jpg-1000width" alt="User-Table" /></p>

<p>在该 <code>users</code> 表中除了主键索引之外，还具有以下 (username, city)、(username, age) 和 (username) 几个辅助索引，当我们使用如下所示的查询时：</p>

<p><img src="https://img.nju520.me/2017-09-16-Filter-Factor.jpg-1000width" alt="Filter-Facto" /></p>

<p>两个查询条件分别有着 0.05% 和 12% 的过滤因子，该查询可以直接使用已有的辅助索引 (username, city)，接下来我们根据表中的总行数和过滤因子开始估算这一步骤 SQL 的执行时间：</p>

<p><img src="https://img.nju520.me/2017-09-16-Index-Slice-Scan.jpg-1000width" alt="Index-Slice-Scan" /></p>

<p>该查询在开始时会命中 (username, city) 索引，扫描符合条件的索引片，该索引总共会访问 10,000,000 * 0.05% * 12% = 600 条数据，其中包括 1 次的随机访问和 599 次的顺序访问，因为该索引中的列并不能满足查询的需要，所以对于每一个索引行都会产生一次表的随机访问，以获取剩余列 age 的信息：</p>

<p><img src="https://img.nju520.me/2017-09-16-Index-Table-Touch.jpg-1000width" alt="Index-Table-Touch" /></p>

<p>在这个过程中总共产生了 600 次随机访问，最后取回结果集的过程中也会有 600 次 FETCH 操作，从总体上来看这一次 SQL 查询共进行了 <strong>601 次随机访问</strong>、599 次顺序访问和 600 次 FETCH，根据上一节中的公式我们可以得到这个查询的用时约为 6075.99ms 也就是 6s 左右，这个时间对于绝大多数应用都是无法接受的。</p>

<p><img src="https://img.nju520.me/2017-09-16-SQL-Query-Time.jpg-1000width" alt="SQL-Query-Time" /></p>

<p>在整个查询的过程中，回表查询的 600 次随机访问成为了这个超级慢的查询的主要贡献，为了解决这个问题，我们只需要添加一个 (username, city, age) 索引或者在已有的 (username, city) 后添加新的 age 列就可以避免 600 次的随机访问：</p>

<p><img src="https://img.nju520.me/2017-09-16-SQL-Query-Time-After-Optimization.jpg-1000width" alt="SQL-Query-Time-After-Optimization" /></p>

<p>(username, city, age) 索引对于该查询其实就是一个三星索引了，有关索引设计的内容可以阅读上一篇文章 <a href="http://nju520.me/sql-index-intro.html">MySQL 索引设计概要</a> 如果读者有充足的时间依然强烈推荐 <a href="https://www.amazon.cn/图书/dp/B00ZH27RH0">数据库索引设计与优化</a> 这本书。</p>

<h2 id="总结">总结</h2>

<p>这篇文章是这一年来写的最短的一篇文章了，本来想详细介绍一下 <a href="https://www.amazon.cn/图书/dp/B00ZH27RH0">数据库索引设计与优化</a> 书中对于索引性能分析的预估方法，仔细想了一下这部分的内容实在太多，例子也非常丰富，只通过一篇文章很难完整地介绍其中的全部内容，所以只选择了其中的一部分知识点简单介绍，这也是这篇文章叫概要的原因。</p>

<p>如果对文章的内容有疑问，可以在评论中留言。</p>

<h2 id="reference">Reference</h2>

<ul>
  <li><a href="https://www.amazon.cn/图书/dp/B00ZH27RH0">数据库索引设计与优化</a></li>
</ul>

  ]]></description>
</item>

<item>
  <title>MySQL 索引设计概要</title>
  <link>//sql-index-intro</link>
  <author>nju520</author>
  <pubDate>2017-09-11T00:00:00+08:00</pubDate>
  <guid>//sql-index-intro</guid>
  <description><![CDATA[
  <p>在关系型数据库中设计索引其实并不是复杂的事情，很多开发者都觉得设计索引能够提升数据库的性能，相关的知识一定非常复杂。</p>

<p><img src="https://img.nju520.me/2017-09-11-Index-and-Performance.jpg-1000width" alt="Index-and-Performance" /></p>

<p>然而这种想法是不正确的，索引其实并不是一个多么高深莫测的东西，只要我们掌握一定的方法，理解索引的实现就能在不需要 DBA 的情况下设计出高效的索引。</p>

<p>本文会介绍 <a href="https://www.amazon.cn/图书/dp/B00ZH27RH0">数据库索引设计与优化</a> 中设计索引的一些方法，让各位读者能够快速的在现有的工程中设计出合适的索引。</p>

<h2 id="磁盘-io">磁盘 IO</h2>

<p>一个数据库必须保证其中存储的所有数据都是可以随时读写的，同时因为 MySQL 中所有的数据其实都是以文件的形式存储在磁盘上的，而从磁盘上<strong>随机访问</strong>对应的数据非常耗时，所以数据库程序和操作系统提供了缓冲池和内存以提高数据的访问速度。</p>

<p><img src="https://img.nju520.me/2017-09-11-Disk-IO.jpg-1000width" alt="Disk-IO" /></p>

<p>除此之外，我们还需要知道数据库对数据的读取并不是以行为单位进行的，无论是读取一行还是多行，都会将该行或者多行所在的页全部加载进来，然后再读取对应的数据记录；也就是说，读取所耗费的时间与行数无关，只与页数有关。</p>

<p><img src="https://img.nju520.me/2017-09-11-Page-DatabaseBufferPool.jpg-1000width" alt="Page-DatabaseBufferPool" /></p>

<p>在 MySQL 中，页的大小一般为 16KB，不过也可能是 8KB、32KB 或者其他值，这跟 MySQL 的存储引擎对数据的存储方式有很大的关系，文中不会展开介绍，不过<strong>索引或行记录是否在缓存池中极大的影响了访问索引或者数据的成本</strong>。</p>

<h3 id="随机读取">随机读取</h3>

<p>数据库等待一个页从磁盘读取到缓存池的所需要的成本巨大的，无论我们是想要读取一个页面上的多条数据还是一条数据，都需要消耗<strong>约</strong> 10ms 左右的时间：</p>

<p><img src="https://img.nju520.me/2017-09-11-Disk-Random-IO.jpg-1000width" alt="Disk-Random-IO" /></p>

<p>10ms 的时间在计算领域其实是一个非常巨大的成本，假设我们使用脚本向装了 SSD 的磁盘上顺序写入字节，那么在 10ms 内可以写入大概 3MB 左右的内容，但是数据库程序在 10ms 之内只能将一页的数据加载到数据库缓冲池中，从这里可以看出随机读取的代价是巨大的。</p>

<p><img src="https://img.nju520.me/2017-09-11-Disk-IO-Total-Time.jpg-1000width" alt="Disk-IO-Total-Time" /></p>

<p>这 10ms 的一次随机读取是按照每秒 50 次的读取计算得到的，其中等待时间为 3ms、磁盘的实际繁忙时间约为 6ms，最终数据页从磁盘传输到缓冲池的时间为 1ms 左右，在对查询进行估算时并不需要准确的知道随机读取的时间，只需要知道估算出的 10ms 就可以了。</p>

<h3 id="内存读取">内存读取</h3>

<p>如果在数据库的<strong>缓存池</strong>中没有找到对应的数据页，那么会去内存中寻找对应的页面：</p>

<p><img src="https://img.nju520.me/2017-09-11-Read-from-Memory.jpg-1000width" alt="Read-from-Memory" /></p>

<p>当对应的页面存在于内存时，数据库程序就会使用内存中的页，这能够将数据的读取时间降低一个数量级，将 10ms 降低到 1ms；MySQL 在执行读操作时，会先从数据库的缓冲区中读取，如果不存在与缓冲区中就会尝试从内存中加载页面，如果前面的两个步骤都失败了，最后就只能执行随机 IO 从磁盘中获取对应的数据页。</p>

<h3 id="顺序读取">顺序读取</h3>

<p>从磁盘读取数据并不是都要付出很大的代价，当数据库管理程序一次性从磁盘中<strong>顺序</strong>读取大量的数据时，读取的速度会异常的快，大概在 40MB/s 左右。</p>

<p><img src="https://img.nju520.me/2017-09-11-Sequential-Reads-from-Disk.jpg-1000width" alt="Sequential-Reads-from-Disk" /></p>

<p>如果一个页面的大小为 4KB，那么 1s 的时间就可以读取 10000 个页，读取一个页面所花费的平均时间就是 0.1ms，相比随机读取的 10ms 已经降低了两个数量级，甚至比内存中读取数据还要快。</p>

<p><img src="https://img.nju520.me/2017-09-11-Random-to-Sequential.jpg-1000width" alt="Random-to-Sequentia" /></p>

<p>数据页面的顺序读取有两个非常重要的优势：</p>

<ol>
  <li>同时读取多个界面意味着总时间的消耗会大幅度减少，磁盘的吞吐量可以达到 40MB/s；</li>
  <li>数据库管理程序会对一些即将使用的界面进行预读，以减少查询请求的等待和响应时间；</li>
</ol>

<h3 id="小结">小结</h3>

<p>数据库查询操作的时间大都消耗在从磁盘或者内存中读取数据的过程，由于随机 IO 的代价巨大，如何在一次数据库查询中减少随机 IO 的次数往往能够大幅度的降低查询所耗费的时间提高磁盘的吞吐量。</p>

<h2 id="查询过程">查询过程</h2>

<p>在上一节中，文章从数据页加载的角度介绍了磁盘 IO 对 MySQL 查询的影响，而在这一节中将介绍 MySQL 查询的执行过程中以及数据库中的数据的特征对最终查询性能的影响。</p>

<h3 id="索引片index-slices">索引片（Index Slices）</h3>

<p>索引片其实就是 SQL 查询在执行过程中扫描的一个索引片段，在这个范围中的索引将被顺序扫描，根据索引片包含的列数不同，<a href="https://www.amazon.cn/图书/dp/B00ZH27RH0">数据库索引设计与优化</a> 书中对将索引分为宽索引和窄索引：</p>

<p><img src="https://img.nju520.me/2017-09-11-Thin-Index-and-Fat-Index.jpg-1000width" alt="Thin-Index-and-Fat-Index" /></p>

<blockquote>
  <p>主键列 <code>id</code> 在所有的 MySQL 索引中都是一定会存在的。</p>
</blockquote>

<p>对于查询 <code>SELECT id, username, age FROM users WHERE username="hacker"</code> 来说，(id, username) 就是一个窄索引，因为该索引没有包含存在于 SQL 查询中的 age 列，而 (id, username, age) 就是该查询的一个宽索引了，它<strong>包含这个查询中所需要的全部数据列</strong>。</p>

<p>宽索引能够避免二次的随机 IO，而窄索引就需要在对索引进行顺序读取之后再根据主键 id 从主键索引中查找对应的数据：</p>

<p><img src="https://img.nju520.me/2017-09-11-Thin-Index-and-Clustered-Index.jpg-1000width" alt="Thin-Index-and-Clustered-Index" /></p>

<p>对于窄索引，每一个在索引中匹配到的记录行最终都需要执行另外的随机读取从聚集索引中获得剩余的数据，如果结果集非常大，那么就会导致随机读取的次数过多进而影响性能。</p>

<h3 id="过滤因子">过滤因子</h3>

<p>从上一小节对索引片的介绍，我们可以看到影响 SQL 查询的除了查询本身还与数据库表中的数据特征有关，如果使用的是窄索引那么对表的随机访问就不可避免，在这时如何让索引片变『薄』就是我们需要做的了。</p>

<p>一个 SQL 查询扫描的索引片大小其实是由过滤因子决定的，也就是满足查询条件的记录行数所占的比例：</p>

<p><img src="https://img.nju520.me/2017-09-11-Filter-Factor.jpg-1000width" alt="Filter-Facto" /></p>

<p>对于 users 表来说，sex=”male” 就不是一个好的过滤因子，它会选择整张表中一半的数据，所以<strong>在一般情况下</strong>我们最好不要使用 sex 列作为整个索引的第一列；而 name=”hacker” 的使用就可以得到一个比较好的过滤因子了，它的使用能过滤整个数据表中 99.9% 的数据；当然我们也可以将这三个过滤进行组合，创建一个新的索引 (name, age, sex) 并同时使用这三列作为过滤条件：</p>

<p><img src="https://img.nju520.me/2017-09-11-Combined-Filter-Factor.jpg-1000width" alt="Combined-Filter-Facto" /></p>

<blockquote>
  <p>当三个过滤条件都是等值谓词时，几个索引列的顺序其实是无所谓的，索引列的顺序不会影响同一个 SQL 语句对索引的选择，也就是索引 (name, age, sex) 和 (age, sex, name) 对于上图中的条件来说是完全一样的，这两个索引在执行查询时都有着完全相同的效果。</p>
</blockquote>

<p>组合条件的过滤因子就可以达到十万分之 6 了，如果整张表中有 10w 行数据，也只需要在扫描薄索引片后进行 6 次随机读取，这种直接使用乘积来计算组合条件的过滤因子其实有一个比较重要的问题：列与列之间不应该有太强的相关性，如果不同的列之间有相关性，那么得到的结果就会比直接乘积得出的结果大一些，比如：所在的城市和邮政编码就有非常强的相关性，两者的过滤因子直接相乘其实与实际的过滤因子会有很大的偏差，不过这在多数情况下都不是太大的问题。</p>

<p>对于一张表中的同一个列，不同的值也会有不同的过滤因子，这也就造成了同一列的不同值最终的查询性能也会有很大差别：</p>

<p><img src="https://img.nju520.me/2017-09-11-Same-Columns-Filter-Factor.jpg-1000width" alt="Same-Columns-Filter-Facto" /></p>

<p>当我们评估一个索引是否合适时，需要考虑极端情况下查询语句的性能，比如 0% 或者 50% 等；最差的输入往往意味着最差的性能，在平均情况下表现良好的 SQL 语句在极端的输入下可能就完全无法正常工作，这也是在设计索引时需要注意的问题。</p>

<p>总而言之，需要扫描的索引片的大小对查询性能的影响至关重要，而扫描的索引记录的数量，就是总行数与组合条件的过滤因子的乘积，索引片的大小最终也决定了从表中读取数据所需要的时间。</p>

<h3 id="匹配列与过滤列">匹配列与过滤列</h3>

<p>假设在 users 表中有 name、age 和 (name, sex, age) 三个辅助索引；当 WHERE 条件中存在类似 age = 21 或者 name = “hacker” 这种<strong>等值谓词</strong>时，它们都会成为匹配列（Matching Column）用于选择索引树中的数据行，但是当我们使用以下查询时：</p>

<pre><code class="language-sql">SELECT * FROM users
WHERE name = "hacker" AND sex = "male" AND age &gt; 20;
</code></pre>

<p>虽然我们有 (name, sex, age) 索引包含了上述查询条件中的全部列，但是在这里只有 name 和 sex 两列才是匹配列，MySQL 在执行上述查询时，会选择 name 和 sex 作为匹配列，扫描所有满足条件的数据行，然后将 age 当做过滤列（Filtering Column）：</p>

<p><img src="https://img.nju520.me/2017-09-11-Match-Columns-Filter-Columns.jpg-1000width" alt="Match-Columns-Filter-Columns" /></p>

<p>过滤列虽然不能够减少索引片的大小，但是能够减少从表中随机读取数据的次数，所以在索引中也扮演着非常重要的角色。</p>

<h2 id="索引的设计">索引的设计</h2>

<p>作者相信文章前面的内容已经为索引的设计提供了充足的理论基础和知识，从总体来看如何减少随机读取的次数是设计索引时需要重视的最重要的问题，在这一节中，我们将介绍 <a href="https://www.amazon.cn/图书/dp/B00ZH27RH0">数据库索引设计与优化</a> 一书中归纳出的设计最佳索引的方法。</p>

<h3 id="三星索引">三星索引</h3>

<p>三星索引是对于一个查询语句可能的最好索引，如果一个查询语句的索引是三星索引，那么它只需要进行<strong>一次磁盘的随机读及一个窄索引片的顺序扫描</strong>就可以得到全部的结果集；因此其查询的响应时间比普通的索引会少几个数量级；根据书中对三星索引的定义，我们可以理解为主键索引对于 <code>WHERE id = 1</code> 就是一个特殊的三星索引，我们只需要对主键索引树进行一次索引访问并且顺序读取一条数据记录查询就结束了。</p>

<p><img src="https://img.nju520.me/2017-09-11-Three-Star-Index.jpg-1000width" alt="Three-Star-Index" /></p>

<p>为了满足三星索引中的三颗星，我们分别需要做以下几件事情：</p>

<ol>
  <li>第一颗星需要取出所有等值谓词中的列，作为索引开头的最开始的列（任意顺序）；</li>
  <li>第二颗星需要将 ORDER BY 列加入索引中；</li>
  <li>第三颗星需要将查询语句剩余的列全部加入到索引中；</li>
</ol>

<blockquote>
  <p>三星索引的概念和星级的给定来源于 <a href="https://www.amazon.cn/图书/dp/B00ZH27RH0">数据库索引设计与优化</a> 书中第四章三星索引一节。</p>
</blockquote>

<p>如果对于一个查询语句我们依照上述的三个条件进行设计，那么就可以得到该查询的三星索引，这三颗星中的最后一颗星往往都是最容易获得的，满足第三颗星的索引也就是上面提到的宽索引，能够避免大量的随机 IO，如果我们遵循这个顺序为一个 SQL 查询设计索引那么我们就可以得到一个完美的索引了；这三颗星的获得其实也没有表面上这么简单，每一颗星都有自己的意义：</p>

<p><img src="https://img.nju520.me/2017-09-11-Behind-Three-Star-Index.jpg-1000width" alt="Behind-Three-Star-Index" /></p>

<ol>
  <li>第一颗星不只是将等值谓词的列加入索引，它的作用是减少索引片的大小以减少需要扫描的数据行；</li>
  <li>第二颗星用于避免排序，减少磁盘 IO 和内存的使用；</li>
  <li>第三颗星用于避免每一个索引对应的数据行都需要进行一次随机 IO 从聚集索引中读取剩余的数据；</li>
</ol>

<p>在实际场景中，问题往往没有这么简单，我们虽然可以总能够通过宽索引避免大量的随机访问，但是在一些复杂的查询中我们无法同时获得第一颗星和第二颗星。</p>

<pre><code class="language-sql">SELECT id, name, age FROM users
WHERE age BETWEEN 18 AND 21
  AND city = "Beijing"
ORDER BY name;
</code></pre>

<p>在上述查询中，我们总可以通过增加索引中的列以获得第三颗星，但是如果我们想要获得第一颗星就需要最小化索引片的大小，这时索引的前缀必须为 (city, age)，在这时再想获得第三颗星就不可能了，哪怕在 age 的后面添加索引列 name，也会因为 name 在范围索引列 age 后面必须进行一次排序操作，最终得到的索引就是 (city, age, name, id)：</p>

<p><img src="https://img.nju520.me/2017-09-11-Different-Stars-Index.jpg-1000width" alt="Different-Stars-Index" /></p>

<p>如果我们需要在内存中避免排序的话，就需要交换 age 和 name 的位置了，在这时就可以得到索引 (city, name, age, id)，当一个 SQL 查询中<strong>同时拥有范围谓词和 ORDER BY 时</strong>，无论如何我们都是没有办法获得一个三星索引的，我们能够做的就是在这两者之间做出选择，是牺牲第一颗星还是第二颗星。</p>

<p>总而言之，在设计单表的索引时，首先把查询中所有的<strong>等值谓词全部取出</strong>以任意顺序放在索引最前面，在这时，如果索引中同时存在范围索引和 ORDER BY 就需要权衡利弊了，希望最小化扫描的索引片厚度时，应该将<strong>过滤因子最小的范围索引列</strong>加入索引，如果希望避免排序就选择 <strong>ORDER BY 中的全部列</strong>，在这之后就只需要将查询中<strong>剩余的全部列</strong>加入索引了，通过这种固定的方法和逻辑就可以最快地获得一个查询语句的二星或者三星索引了。</p>

<h2 id="总结">总结</h2>

<p>在单表上对索引进行设计其实还是非常容易的，只需要遵循固定的套路就能设计出一个理想的三星索引，在这里强烈推荐 <a href="https://www.amazon.cn/图书/dp/B00ZH27RH0">数据库索引设计与优化</a> 这本书籍，其中包含了大量与索引设计与优化的相关内容；在之后的文章中读者也会分析介绍书中提供的几种估算方法，来帮助我们通过预估问题设计出更高效的索引。</p>

<p>如果对文章内容的有疑问，可以在博客下面评论留言。</p>

<h2 id="reference">Reference</h2>

<ul>
  <li><a href="https://www.amazon.cn/图书/dp/B00ZH27RH0">数据库索引设计与优化</a></li>
  <li><a href="https://dev.mysql.com/doc/refman/5.7/en/innodb-file-space.html">File Space Management</a></li>
  <li><a href="https://www.youtube.com/watch?v=9eMWG3fwiEU">Inside of Hard Drive - YouTube</a></li>
  <li><a href="https://www.youtube.com/watch?v=4iaxOUYalJU">Hard Disk Working - How does a hard disk work - Hard Drive - YouTube</a></li>
</ul>

  ]]></description>
</item>


  </channel>
</rss>
