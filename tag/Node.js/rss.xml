<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    
    <title>nju520.me</title>
    
    <link>http://localhost:4000</link>
    <description>nju520's Blog</description>
    <language>en-uk</language>
    <managingEditor> nju520</managingEditor>
    <atom:link href="rss" rel="self" type="application/rss+xml" />
    
<item>
  <title>部署 Node.js+MongoDB App</title>
  <link>//bu-shu-node-jsmongodb-ying-yong</link>
  <author>nju520</author>
  <pubDate>2015-05-22T17:55:22+08:00</pubDate>
  <guid>//bu-shu-node-jsmongodb-ying-yong</guid>
  <description><![CDATA[
  <p>因为最近在为 SportJoin 写 Web API, 由于对大部分的工作已经完成, 所以开始尝试将 Node 代码部署到服务器上.</p>

<p>我在部署的过程中遇到了很多的问题, 在网上找了很多的教程都完全不详细, 并不能直接解决我的问题, 不过所幸经过自己的尝试和摸索最后还是解决了.</p>

<p>我在开发 SportJoin Web API 的时候使用的是 Restify + Mongodb, 所以部署的时候要解决两个问题, 一个是 Mongodb 的安装, 另一个是代码的部署.</p>

<h2 id="digitalocean">DigitalOcean</h2>

<p>因为在一两个月之前, 我曾经注册过 DigitalOcean 的账号,  而且体验也是蛮不错的. 所以在这次我会把我的代码部署到 DigitalOcean 上.</p>

<p>首先会创建一个 droplet, 然后选择 Ubuntu, 并在 Applications 中选择 Node 环境.</p>

<p><img src="/content/images/2015/05/18BCAAB6-D88F-4820-9B88-28567A22CB5A.png" alt="" /></p>

<p>如果你没有使用 DigitalOcean, 而是使用其他的云服务器, 那么唯一的区别就是. <strong>你需要手动安装 Node 环境.</strong></p>

<h2 id="安装-mongodb">安装 Mongodb</h2>

<p>安装 Mongodb 还是很简单的, 你可以看<a href="http://docs.mongodb.org/manual/tutorial/install-mongodb-on-ubuntu/">这篇教程</a>. 当然在 mongodb 的官网上也有在其他 linux 发行版的安装方法.</p>

<p>你只需要远程登录到你的服务器</p>

<pre><code>ssh root@url.com
</code></pre>

<p>然后依次输入下面的命令就好了</p>

<pre><code>sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 7F0CEB10
echo "deb http://repo.mongodb.org/apt/ubuntu "$(lsb_release -sc)"/mongodb-org/3.0 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-3.0.list
sudo apt-get update
sudo apt-get install -y mongodb-org
</code></pre>

<p>它们会自动的安装最新版本的 mongodb.</p>

<p>mongodb 就已经安装完成了. 然后你需要在 mongodb 中创建与你的 Web 应用相同名字的 document(与本地开发环境中创建的相同).</p>

<pre><code>mongo

&gt; use sportjoin
</code></pre>

<h2 id="git-clone">git clone</h2>

<p>我从 bitbucket 上使用 git clone 命令, 将我的 Node 代码抓去下来, 然后先安装所 App 所需要的依赖.</p>

<pre><code>git clone &lt;repo.git&gt;
cd &lt;folder&gt;
npm install
</code></pre>

<h2 id="pm2">pm2</h2>

<p>在这里的部署中, 我没有使用 forever 和 nginx, 而是使用了 <a href="https://github.com/Unitech/PM2">pm2</a> 这是另一个自动部署的工具, 它的使用炒鸡简单.</p>

<p>先在全局中安装 pm2</p>

<pre><code>npm install -g pm2
</code></pre>

<p>然后在工程的根目录下运行 Web 应用</p>

<pre><code>cd &lt;folder&gt;
pm2 start &lt;app.js&gt;
</code></pre>

<p>到目前为止部署就完成了, 对于更加详细的配置, 可以看 pm2 github 的文档找到更多的资料.</p>

<h2 id="总结">总结</h2>

<p>总体来说部署还是很容易的, 在之后的更新中只需要在本地 push 代码, 然后在服务器上 pull 下来就可以了. 不需要 nginx 和 forever.</p>

  ]]></description>
</item>

<item>
  <title>我只想安安静静地学 Node.js</title>
  <link>//zhi-xiang-an-an-jing-jing-di-xue-node-js</link>
  <author>nju520</author>
  <pubDate>2015-04-19T11:26:20+08:00</pubDate>
  <guid>//zhi-xiang-an-an-jing-jing-di-xue-node-js</guid>
  <description><![CDATA[
  <p>这几天没有什么别的事情, 接的几个项目也没有给我 UI 设计图. 最近听说Node.js 这么~~火~~优雅, 兴趣也很大, 就来尝试学习一下.</p>

<p><img src="/content/images/2015/04/nodejs-01.png" alt="" /></p>

<p>学习 Node.js 的路线图我是在知乎找到的, 请戳<a href="http://www.zhihu.com/question/21567720">这里</a>, 我目前学习 Node.js 的方式就是按照这个得票最高的答主的答案学习的.</p>

<p>现在由于对 Node.js 并不是很熟悉, 所以只来谈一谈这几天学习 Node.js 的感受吧.</p>

<h2 id="nodejs-入门">Node.js 入门</h2>

<p>关于 <a href="http://www.nodebeginner.org/index-zh-cn.html">Node.js 入门</a> 这本书写的还是非常好的. 不过读这本书之前或者说学习 Node.js 之前还是点亮 Javascript 这个前置技能比较好.</p>

<pre><code class="language-javascript">console.log("Hello World");
</code></pre>

<h2 id="nodejs-权威指南">Node.js 权威指南</h2>

<p><a href="http://www.amazon.cn/Node-js%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97-%E9%99%86%E5%87%8C%E7%89%9B/dp/B00JQTOAEI/ref=sr_1_1?ie=UTF8&amp;qid=1429414848&amp;sr=8-1&amp;keywords=Node.js+%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97">Node.js 权威指南</a> 写的如何我并不能做出评论, 不过书中使用的 Express 框架, 也就是 Node.js 中用于搭建 Web 服务器的框架版本巨低, 很多代码根本无法运行, 所以我不是很推荐, 因为我在这本书的阅读过程(写书中的实例代码)中还是极其痛苦的, 完全无法快乐的玩耍 (/= _ =)/~┴┴, 而无法快乐的写代码与我的信仰是冲突的 (￣^￣), 我只能放弃了.</p>

<pre><code class="language-javascript">var http = require('http');

var server = http.createServer(function (request, response) {
  response.writeHead(200, {"Content-Type": "text/plain"});
  response.end("Hello World\n");
});

server.listen(8888);

console.log("Server running at http://127.0.0.1:8888/");
</code></pre>

<h2 id="nodejs-并不是一门语言">Node.js 并不是一门语言</h2>

<p>对一种技术的尊重, 第一件事是要叫对它的名字, 总有人把 <code>Objective-C</code> 写成 <code>object c</code> 我真是受不了啊…就算不写这么长, 写 <code>OC</code> 好么… 对于我这种强迫症患者跟本无法忍受.</p>

<p>同理 Node.js 并不是一门语言, 而是一个平台:</p>

<blockquote>
  <p>Node.js is a platform built on Chrome’s JavaScript runtime for easily building fast, scalable network applications.</p>
</blockquote>

<p>这个从 <a href="https://nodejs.org/">Node.js 官网</a> 上扒下来的话已经非常清楚地道明了, <strong>这货是一个平台, 不是一门语言</strong>. 我在这篇 post 中也会重视这一点, 时刻提醒自己与各位.</p>

<h2 id="express">Express</h2>

<p><a href="http://expressjs.com/">Express</a> 是基于 Node.js 的 Web 框架, 其实各种脚本语言, Ruby, Python, Node.js(并不是语言) 的 Web 框架使用起来在大体上是差不多的.</p>

<p>Sinatra:</p>

<pre><code class="language-ruby">get '/hi' do
  "Hello World!"
end
</code></pre>

<p>Flask:</p>

<pre><code class="language-python">@app.route("/")
def hello():
    return "Hello World!"
</code></pre>

<p>Express:</p>

<pre><code class="language-javascript">app.get('/', function(req, res) {
  res.send('hello world');
});
</code></pre>

<p>可以看到这三个框架在使用上或者说形式是相似的. 但是, 它们也有很多的不同.</p>

<p>其实只要你长时间做 Web 开发, “精通”这些框架中的一个, 其它不同”语言”的框架也是很容易掌握的. 关键之处在于理解它们的使用场景和细节上的不同之处.</p>

<p>比如说:</p>

<blockquote>
  <p>Node.js 比较适合实现高并发 IO 系统, 而不适合高 CPU/内存消耗的计算.</p>
</blockquote>

<p>总有人会许寻找适合所有领域的技术, 而这样的技术在目前来看是不存在的, 而什么时候会存在, 只有天知道了. =_=</p>

<h2 id="事件驱动">事件驱动</h2>

<p>接下来~~扯~~讲一下 Node.js 中的一个很重要的概念, 就是<strong>事件驱动</strong>.</p>

<blockquote>
  <p>Node.js 是事件驱动的.</p>
</blockquote>

<h3 id="编程范式">编程范式?</h3>

<p>第一次听到事件驱动这个概念, 我的第一想法是这是一种<strong>编程范式</strong>么? 于是我又翻开了 <a href="https://www.info.ucl.ac.be/~pvr/book">CTMCP</a>, 看了一下这本书的目录, 并没有找到事件驱动这个编程范式.</p>

<p>于是我求助了 Google, <a href="http://zh.wikipedia.org/wiki/%E4%BA%8B%E4%BB%B6%E9%A9%85%E5%8B%95%E7%A8%8B%E5%BC%8F%E8%A8%AD%E8%A8%88">事件驱动程序设计</a> 其实我并没有看懂 =_=, 不过看到这里, 虽然 CTMCP 中没有提到, 不过这确实是一种编程范式.</p>

<h3 id="回调函数">回调函数</h3>

<p>Node.js 的事件驱动是基于一个<strong>回调函数</strong>的. 当某个事件发生时, 这个回调函数才会被调用, 而不像传统的编程范式操作都是线性运行的: 如果需要用户的输入, 就会一直等待直到用户输入完成.</p>

<p>在 Node.js 中当发生了用户输入这个时间之后才回去调用回调函数完成之后的工作, 这也就是为什么</p>

<blockquote>
  <p>Node.js 比较适合实现高并发 IO 系统.</p>
</blockquote>

<hr />

<h2 id="总结">总结</h2>

<p>学习 Node.js 的主要目的是为我的 iOS 应用搭建 Web api, 所以, 我并没有选择 Express 而是选择了 <a href="https://github.com/mcavage/node-restify">restify</a>, 这是一个专门用于搭建 Web api 的框架, 没有模板啊与 Web 前端相关的东西.</p>

<p>接下来我会继续学习 Node.js 尤其是 restify, “精通”这门优雅的”语言”.</p>

  ]]></description>
</item>


  </channel>
</rss>
