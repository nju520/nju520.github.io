<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    
    <title>nju520.me</title>
    
    <link>http://localhost:4000</link>
    <description>nju520's Blog</description>
    <language>en-uk</language>
    <managingEditor> nju520</managingEditor>
    <atom:link href="rss" rel="self" type="application/rss+xml" />
    
<item>
  <title>神奇的 BlocksKit （二）</title>
  <link>//blockskit-2</link>
  <author>nju520</author>
  <pubDate>2016-03-10T17:42:55+08:00</pubDate>
  <guid>//blockskit-2</guid>
  <description><![CDATA[
  <iframe src="http://ghbtns.com/github-btn.html?user=nju520&amp;type=follow&amp;size=large" height="30" width="240" frameborder="0" scrolling="0" style="width:240px; height: 30px;" allowtransparency="true"></iframe>

<blockquote>
  <p>关注仓库，及时获得更新：<a href="https://github.com/nju520/iOS-Source-Code-Analyze">iOS-Source-Code-Analyze</a></p>
</blockquote>

<p>这篇文章『神奇的 BlocksKit』的第二部分，关于第一部分的内容在这里：</p>

<ul>
  <li><a href="http://nju520.me/blockskit-1/">神奇的 BlocksKit（一）</a></li>
  <li><a href="http://nju520.me/blockskit-2/">神奇的 BlocksKit（二）</a></li>
</ul>

<h2 id="动态代理">动态代理</h2>

<p>动态代理这部分可以说是 BlocksKit 的精华。它<strong>使用 block 属性替换 UIKit 中的所有能够通过代理完成的事件</strong>，省略了设置代理和实现方法的过程，让对象自己实现代理方法，而且这个功能的实现是极其动态的。</p>

<blockquote>
  <p>其实不是对象自己实现的代理方法，只是框架为我们提供的便捷方法，不需要构造其它对象就能完成代理方法的实现，具体我们会在后面详细地解释。</p>
</blockquote>

<p>下面是这部分几个关键的类：</p>

<ul>
  <li><code>A2BlockInvocation</code> 的主要作用是存储和转发 block</li>
  <li><code>A2DynamicDelegate</code> 用来实现类的代理和数据源，它是 <code>NSProxy</code> 的子类</li>
  <li><code>NSObject+A2DynamicDelegate</code> 负责为返回 <code>bk_dynamicDelegate</code> 和 <code>bk_dynamicDataSource</code> 等 <code>A2DynamicDelegate</code> 类型的实例，为 <code>NSObject</code> 提供主要的接口</li>
  <li><code>NSObject+A2BlockDelegate</code> 提供了一系列接口将代理方法映射到 block 上</li>
  <li>其他的 UIKit 的分类提供对应的属性，并在对应的 <code>A2DynamicDelegate</code> 子类中实现代理方法</li>
</ul>

<p>这里是我对这部分代码结构的理解：</p>

<p><img src="http://7xrlu3.com1.z0.glb.clouddn.com/2016-03-20-blockskit.png" alt="" /></p>

<p>这篇文成首先会从上到下对整个工作原理进行概述，然后再从底层到顶层详细地解释这个框架的机制和原理。</p>

<h3 id="动态代理工作概述">动态代理工作概述</h3>

<p>在这里我们要对这部分的实现进行一个简单的概述，从上到下跟踪 BlocksKit 的调用过程。</p>

<p>以 <code>UIImagePickerController</code> 为例，因为这个文件中的代码较少，能省去很多不必要的实现细节。</p>

<p>在头文件中声明了两个属性，也就是 <code>UIImagePickerController</code> 代理方法的对应 block 属性：</p>

<pre><code class="language-objectivec">@property (nonatomic，copy) void(^bk_didFinishPickingMediaBlock)(UIImagePickerController *，NSDictionary *);
@property (nonatomic，copy) void(^bk_didCancelBlock)(UIImagePickerController *);
</code></pre>

<p>然后在实现文件中动态生成这两个方法的存取方法</p>

<pre><code class="language-objectivec">@dynamic bk_didFinishPickingMediaBlock;
@dynamic bk_didCancelBlock;
</code></pre>

<p>你可以看到在这个名为 <code>BlocksKit</code> 的分类中只添加了一个方法：</p>

<pre><code class="language-objectivec">+ (void)load
{
	@autoreleasepool {
		[self bk_registerDynamicDelegate];
		[self bk_linkDelegateMethods:@{ @"bk_didFinishPickingMediaBlock": @"imagePickerController:didFinishPickingMediaWithInfo:",
                                        @"bk_didCancelBlock": @"imagePickerControllerDidCancel:" }];
	}
}
</code></pre>

<p>在 <code>load</code> 中实现这个方法，能够减少其中两个方法的调用次数，在 <code>autoreleasepool</code> 块中调用方法，使得其它地方的代码不会受到这里注册代理，链接代理方法中产生的对象的影响。</p>

<p><code>bk_registerDynamicDelegate</code> 方法是 <code>NSObject+A2BlockDelegate</code> 分类中添加的方法，用于修改原有属性 <code>delegate</code> 方法的实现（<strong>动态替换 delegate 方法实现</strong>）。在这里就是与 <code>UIImagePickerController+BlocksKit</code> 处于同一文件下的 <code>A2DynamicUIImagePickerControllerDelegate</code>，先不说这个文件的功能，会在之后介绍。</p>

<p>在 <code>NSObject+A2DynamicDelegate</code> 分类中的 <code>bk_registerDynamicDelegateNamed:forProtocol:</code> 修改 <code>@selector(delegate)</code> 和 <code>@selector(setDelegate:)</code> 的实现，使用 <code>A2DynamicUIImagePickerControllerDelegate</code> 替换原有的 <code>delegate</code></p>

<pre><code class="language-objectivec">IMP setterImplementation = imp_implementationWithBlock(^(NSObject *delegatingObject，id delegate) {
	A2DynamicDelegate *dynamicDelegate = getDynamicDelegate(delegatingObject，protocol，infoAsPtr，YES);
	if ([delegate isEqual:dynamicDelegate]) {
		delegate = nil;
	}
	dynamicDelegate.realDelegate = delegate;
});

IMP getterImplementation = imp_implementationWithBlock(^(NSObject *delegatingObject) {
    return [delegatingObject bk_dynamicDelegateForProtocol:a2_protocolForDelegatingObject(delegatingObject，protocol)];
});
</code></pre>

<p>在获取 <code>delegate</code> 属性时，就会获取 <code>A2DynamicUIImagePickerControllerDelegate</code>， <code>realDelegate</code> 相当于原有的 <code>delegate</code> 属性，会在下面的小节中具体分析。</p>

<p>在 <code>load</code> 方法中调用下一个方法是 <code>bk_linkDelegateMethods:</code> 这个方法会把代理方法和对应的 block 属性链接起来，这样可以通过代理方法的选择子查找对应的 block。</p>

<pre><code class="language-objectivec">IMP getterImplementation = imp_implementationWithBlock(^(NSObject *delegatingObject) {
	A2DynamicDelegate *delegate = getDynamicDelegate(delegatingObject，protocol，info，NO);
	return [delegate blockImplementationForMethod:selector];
});

IMP setterImplementation = imp_implementationWithBlock(^(NSObject *delegatingObject，id block) {
	A2DynamicDelegate *delegate = getDynamicDelegate(delegatingObject，protocol，info，YES);
	[delegate implementMethod:selector withBlock:block];
});
</code></pre>

<p>通过调用 <code>A2DynamicDelegate</code> 的实例方法 <code>blockImplementationForMethod:</code> 和 <code>implementMethod:withBlock:</code> 动态实现 block 的存取方法。</p>

<p>当代理方法 <code>imagePickerController:didFinishPickingMediaWithInfo:</code> 被调用时，因为 <code>A2DynamicUIImagePickerControllerDelegate</code> 是 <code>UIImagePickerController</code> 的代理，所以会调用它的方法：</p>

<pre><code class="language-objectivec">- (void)imagePickerController:(UIImagePickerController *)picker didFinishPickingMediaWithInfo:(NSDictionary *)info {
	id realDelegate = self.realDelegate;
	if (realDelegate &amp;&amp; [realDelegate respondsToSelector:@selector(imagePickerController:didFinishPickingMediaWithInfo:)])
		[realDelegate imagePickerController:picker didFinishPickingMediaWithInfo:info];

	void (^block)(UIImagePickerController *，NSDictionary *) = [self blockImplementationForMethod:_cmd];
	if (block) block(picker，info);
}
</code></pre>

<p>通过 <code>blockImplementationForMethod:</code> 方法获取在上面存储的 block，然后传入参数执行该代码块。</p>

<ol>
  <li>在 <code>load</code> 方法注册动态代理并链接代理方法</li>
  <li>在运行时修改原有的 <code>delegate</code> 属性的存取方法，使用 <code>A2DynamicDelegate</code> 替换原有的 <code>delegate</code>，原有的 <code>delegate</code> 换为 <code>realDelegate</code></li>
  <li>为 block 属性动态实现存取方法，返回对应 <code>A2DynamicDelegate</code> 子类中存储的 block</li>
  <li>在代理方法真正被调用时，查找 <code>realDelegate</code> 中是否对代理方法做出响应，无论是否响应，都通过选择子查找对应的 <code>block</code>，然后传入相应参数执行 block</li>
</ol>

<h3 id="自底向上分析动态代理的工作">自底向上分析动态代理的工作</h3>

<p>我们已经自顶向下分析了 BlocksKit 的工作过程，也对这个部分有一个基本的了解，接下来我们将从底层到顶层分析整个 BlocksKit，我们再来看一下整个框架的结构图：</p>

<p><img src="http://7xrlu3.com1.z0.glb.clouddn.com/2016-03-20-blockskit.png" alt="" /></p>

<p>我们将以下面的顺序来依次介绍这些模块，其中的 <code>UITextField</code> 可以换成其它的类：</p>

<ol>
  <li>A2BlockInvocation</li>
  <li>A2DynamicDelegate</li>
  <li>NSObject+A2DynamicDelegate</li>
  <li>A2DynamicUITextFieldDelegate</li>
  <li>UITextField+BlocksKit</li>
</ol>

<h4 id="a2blockinvocation">A2BlockInvocation</h4>

<p><code>A2BlockInvocation</code> 使用来对闭包，也就是 block 进行存储和转发的类。</p>

<p>先介绍这个的是因为 <code>A2BlockInvocation</code> 的功能比较底层，涉及的内容也都比较奇葩，所以想先简单介绍一下，避免之后一个类分几部分介绍。</p>

<p>在 Objective-C 中，每一个方法甚至 block 都是有类型签名的：</p>

<pre><code class="language-objectivec">@interface NSMethodSignature : NSObject {

...

@property (readonly) NSUInteger numberOfArguments;

...

@property (readonly) const char *methodReturnType NS_RETURNS_INNER_POINTER;

...

@end
</code></pre>

<p>它们有返回类型、参数数字和参数类型等等。</p>

<h5 id="block-结构体">Block 结构体</h5>

<p>block 的签名没有哪个函数能够直接获取，它存储在 block 的结构体中，就像这样：</p>

<pre><code class="language-objectivec">typedef NS_OPTIONS(int，BKBlockFlags) {
	BKBlockFlagsHasCopyDisposeHelpers = (1 &lt;&lt; 25),
	BKBlockFlagsHasSignature          = (1 &lt;&lt; 30)
};

typedef struct _BKBlock {
	__unused Class isa;
	BKBlockFlags flags;
	__unused int reserved;
	void (__unused *invoke)(struct _BKBlock *block，...);
	struct {
		unsigned long int reserved;
		unsigned long int size;
		// requires BKBlockFlagsHasCopyDisposeHelpers
		void (*copy)(void *dst，const void *src);
		void (*dispose)(const void *);
		// requires BKBlockFlagsHasSignature
		const char *signature;
		const char *layout;
	} *descriptor;
	// imported variables
} *BKBlockRef;
</code></pre>

<p>这部分其实就是 block 实际存储在内存中的数据接口，可以在 runtime 中的源代码中看到这里的代码。</p>

<h5 id="typesignatureforblock">typeSignatureForBlock</h5>

<p>上面的 <code>signature</code> 就是 block 的签名，下面实现方法来获取这个签名</p>

<pre><code class="language-objectivec">+ (NSMethodSignature *)typeSignatureForBlock:(id)block __attribute__((pure，nonnull(1)))
{
	BKBlockRef layout = (__bridge void *)block;

	// 如果 block 没有签名直接返回空
	if (!(layout-&gt;flags &amp; BKBlockFlagsHasSignature))
		return nil;

	void *desc = layout-&gt;descriptor;
	desc += 2 * sizeof(unsigned long int);

	if (layout-&gt;flags &amp; BKBlockFlagsHasCopyDisposeHelpers)
		desc += 2 * sizeof(void *);

	if (!desc)
		return nil;

	const char *signature = (*(const char **)desc);

	return [NSMethodSignature signatureWithObjCTypes:signature];
}
</code></pre>

<p>知道了这个方法的作用再理解它的实现就非常简单了，根据<code>flag</code> 来移动指针，最终 <code>signature</code> 所在的内存空间。</p>

<blockquote>
  <p>Unlike a typical method signature，a block type signature has no <code>self</code> (<code>'@'</code>)
 or <code>_cmd</code> (<code>':'</code>) parameter，but instead just one parameter for the block itself
 (<code>'@?'</code>)。</p>
</blockquote>

<p>在这里所涉及的 <code>@</code>、<code>:</code> 和<code>@?</code> 可以看这里的文档 <a href="https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Articles/ocrtTypeEncodings.html">类型编码</a></p>

<p>在一般的方法签名中 block 的类型签名是没有 <code>self</code> (<code>'@'</code>) 或者 <code>_cmd</code> (<code>':'</code>) 的，只有一个参数代表 block 自己 (<code>'@?'</code>).</p>

<ul>
  <li><code>^(UIActionSheet *) {}</code>
    <ul>
      <li>参数类型：<code>@?(@"UIActionSheet")</code></li>
      <li>返回类型：<code>v</code></li>
    </ul>
  </li>
  <li><code>- (void)willPresentActionSheet:(UIActionSheet *)actionSheet</code>
    <ul>
      <li>参数类型：<code>@:@</code></li>
      <li>返回类型：<code>v</code></li>
    </ul>
  </li>
</ul>

<p>为什么要把 <code>@"UIActionSheet"</code> 标记上括号？因为它们属于同一个参数。</p>

<p>同时因为 <code>UIActionSheet</code> 也是 <code>id</code> 类型，所以它的类型编码也是 <code>@</code>。</p>

<p>当调用 <code>initWithBlock:</code> 方法时，会先调用上面说的方法 <code>typeSignatureForBlock:</code> 获取 block 的类型签名：</p>

<pre><code class="language-objectivec">- (instancetype)initWithBlock:(id)block
{
	NSParameterAssert(block);
	NSMethodSignature *blockSignature = [[self class] typeSignatureForBlock:block];
	NSMethodSignature *methodSignature = [[self class] methodSignatureForBlockSignature:blockSignature];
	NSAssert(methodSignature，@"Incompatible block: %@"，block);
	return (self = [self initWithBlock:block methodSignature:methodSignature blockSignature:blockSignature]);
}
</code></pre>

<h5 id="methodsignatureforblocksignature">methodSignatureForBlockSignature</h5>

<p>然后调用 <code>methodSignatureForBlockSignature:</code> 方法构造一个可以兼容的方法签名：</p>

<pre><code class="language-objectivec">+ (NSMethodSignature *)methodSignatureForBlockSignature:(NSMethodSignature *)original
{
	#1: 检查方法签名的参数，省略

	NSMutableString *signature = [[NSMutableString alloc] initWithCapacity:original.numberOfArguments + 1];

	const char *retTypeStr = original.methodReturnType;
	// 返回类型，id 类型(self @)，选择子类型(SEL :)
	[signature appendFormat:@"%s%s%s"，retTypeStr，@encode(id)，@encode(SEL)];
	// signature = (返回类型)@:

	for (NSUInteger i = 1; i &lt; original.numberOfArguments; i++) {
		const char *typeStr = [original getArgumentTypeAtIndex:i];
		NSString *type = [[NSString alloc] initWithBytesNoCopy:(void *)typeStr length:strlen(typeStr) encoding:NSUTF8StringEncoding freeWhenDone:NO];
		[signature appendString:type];
	}

	// signature = (返回类型)@:(参数类型)

	return [NSMethodSignature signatureWithObjCTypes:signature.UTF8String];
}
</code></pre>

<p>具体的实现细节我们就省略了，它的工作原理是把 <code>@?(@"UIActionSheet")</code> 类型签名转换成 <code>@:@</code>，然后返回方法签名。</p>

<p>关于代码中的 <code>@encode</code> 可以看这里 <a href="https://gcc.gnu.org/onlinedocs/gcc-3.2/gcc/Function-Attributes.html">声明方法的属性</a></p>

<h5 id="issignaturecompatiblewithsignature">isSignature:compatibleWithSignature:</h5>

<p>在这个类中最后一个重要的方法就是 <code>isSignature:compatibleWithSignature:</code>，这个方法是判断传入的 block 和方法的类型签名是否兼容。</p>

<pre><code class="language-objectivec">+ (BOOL)isSignature:(NSMethodSignature *)signatureA compatibleWithSignature:(NSMethodSignature *)signatureB __attribute__((pure))
{
	#1: 参数检查，省略

	...

	#2: 判断返回值是否相同，省略
	if (signatureA.methodReturnType[0] != signatureB.methodReturnType[0]) return NO;

	#3: 设置 methodSignature 和 blockSignature

	...

	#4: 比较 methodSignature 和 blockSignature

	return YES;
}
</code></pre>

<p>第 <code>#3</code> 部分设置 <code>methodSignature</code> 和 <code>blockSignature</code>。</p>

<p>因为<strong>方法签名会比 block 类型签名多一个默认参数</strong>，所以，这里会将参数多的设置为 <code>methodSignature</code>，如果把为 block 类型签名的设置给了 <code>methodSignature</code> 也不会有问题，在 <code>#4</code> 部分会判断出来并返回 <code>NO</code>。</p>

<blockquote>
  <p>方法默认参数：<code>self，SEL</code>，block 默认类型参数: <code>block</code></p>
</blockquote>

<pre><code class="language-objectivec">NSMethodSignature *methodSignature = nil，*blockSignature = nil;
if (signatureA.numberOfArguments &gt; signatureB.numberOfArguments) {
    methodSignature = signatureA;
    blockSignature = signatureB;
} else if (signatureB.numberOfArguments &gt; signatureA.numberOfArguments) {
    methodSignature = signatureB;
    blockSignature = signatureA;
} else {
    return NO;
}
</code></pre>

<p>第 <code>#4</code> 部分就是一次比较各个类型签名，也没什么复杂的，需要注意的就是选择正确的 index</p>

<pre><code class="language-objectivec">NSUInteger numberOfArguments = methodSignature.numberOfArguments;
for (NSUInteger i = 2; i &lt; numberOfArguments; i++) {
    if ([methodSignature getArgumentTypeAtIndex:i][0] != [blockSignature getArgumentTypeAtIndex:i - 1][0])
        return NO;
}
</code></pre>

<h5 id="invokewithinvocationreturnvalueoutreturnvalue">invokeWithInvocation:returnValue:outReturnValue:</h5>

<p>这一节主要介绍的是，当 <code>A2BlockInvocation</code> 对象具体需要执行某一个 <code>NSInvocation</code> 时是如何工作的，其实这个方法还是很容易理解的。</p>

<pre><code class="language-objectivec">- (BOOL)invokeWithInvocation:(NSInvocation *)outerInv returnValue:(out NSValue **)outReturnValue setOnInvocation:(BOOL)setOnInvocation
{
	#1: 参数以及类型签名是否匹配的检查，省略

	NSInvocation *innerInv = [NSInvocation invocationWithMethodSignature:self.blockSignature];

	#2: 设置 innerInv 参数

	...

	[innerInv invokeWithTarget:self.block];

	#3: 获取返回值

	free(argBuf);

	return YES;
}
</code></pre>

<p>第 <code>#2</code>、<code>#3</code> 部分的代码是为了设置 <code>innerInv</code> 的参数，获取返回值：</p>

<pre><code class="language-objectivec">void *argBuf = NULL;

for (NSUInteger i = 2; i &lt; sig.numberOfArguments; i++) {
	const char *type = [sig getArgumentTypeAtIndex:i];
	NSUInteger argSize;
	NSGetSizeAndAlignment(type，&amp;argSize，NULL);

	if (!(argBuf = reallocf(argBuf，argSize))) {
		return NO;
	}

	[outerInv getArgument:argBuf atIndex:i];
	[innerInv setArgument:argBuf atIndex:i - 1];
}

// 执行 block

NSUInteger retSize = sig.methodReturnLength;
if (retSize) {
    if (outReturnValue || setOnInvocation) {
        if (!(argBuf = reallocf(argBuf，retSize))) {
            return NO;
        }

        [innerInv getReturnValue:argBuf];

        if (setOnInvocation) {
            [outerInv setReturnValue:argBuf];
        }

        if (outReturnValue) {
            *outReturnValue = [NSValue valueWithBytes:argBuf objCType:sig.methodReturnType];
        }
    }
} else {
    if (outReturnValue) {
        *outReturnValue = nil;
    }
}
</code></pre>

<p><code>A2BlockInvocation</code> 这一节就到这里了，接下来要说一下 <code>A2DynamicDelegate</code>。</p>

<h4 id="a2dynamicdelegate">A2DynamicDelegate</h4>

<p><code>A2DynamicDelegate</code> 可以说是 BlocksKit 实现动态代理的关键，是这个框架中很重要的类，它通过 block 实现了类的代理和数据源等协议。</p>

<p><code>A2DynamicDelegate</code> 它的父类是 <code>NSProxy</code>，而 <code>NSProxy</code> 出现的目的就是为了代理一个对象的。</p>

<pre><code class="language-objectivec">@interface NSProxy &lt;NSObject&gt;
</code></pre>

<p>我们不具体解释这里的 <code>NSProxy</code>，如果想要更详细的信息，请看<a href="https://developer.apple.com/library/prerelease/ios/documentation/Cocoa/Reference/Foundation/Classes/NSProxy_Class/index.html">这里</a>。</p>

<p><code>A2DynamicDelegate</code> 作为 <code>NSProxy</code> 的子类，必须实现 <code>forwardInvocation:</code> <code>methodSignatureForSelector:</code> 方法进行对象转发，这是在苹果官方文档中说明的。</p>

<h5 id="覆写必要的方法-methodsignatureforselector-和-forwardinvocation">覆写必要的方法 methodSignatureForSelector: 和 forwardInvocation:</h5>

<p>我们首先来看一下 <code>methodSignatureForSelector:</code>，它为一个选择子返回合适的方法签名：</p>

<pre><code class="language-objectivec">- (NSMethodSignature *)methodSignatureForSelector:(SEL)aSelector
{
	A2BlockInvocation *invocation = nil;
	if ((invocation = [self.invocationsBySelectors bk_objectForSelector:aSelector]))
		return invocation.methodSignature;
	else if ([self.realDelegate methodSignatureForSelector:aSelector])
		return [self.realDelegate methodSignatureForSelector:aSelector];
	else if (class_respondsToSelector(object_getClass(self)，aSelector))
		return [object_getClass(self) methodSignatureForSelector:aSelector];
	return [[NSObject class] methodSignatureForSelector:aSelector];
}
</code></pre>

<p>这里的逻辑如下：</p>

<ol>
  <li>判断 <code>invocationsBySelectors</code> 属性中是否存储了该选择子对应的 <code>A2BlockInvocation</code>，直接返回这个 <code>invocation</code> 对象的类型签名，也就是说自己实现了该选择子对应的方法</li>
  <li>
    <p>在真正的 <code>realDelegate</code> 中查找原有的代理(不是当前的动态代理 <code>A2DynamicDelegate</code>)是否实现了该选择子，并返回方法签名</p>

    <blockquote>
      <p>在这里的 <code>realDelegate</code> 是对象真正的代理，例如</p>
    </blockquote>

    <pre><code class="language-objectivec"> self.tableView.delegate = [[UIViewController alloc] init];
</code></pre>

    <p>其中 <code>realDelegate</code> 是视图控制器，但是在我们设置时，不需要这么设置</p>

    <pre><code class="language-objectivec"> self.tableView.realDelegate = [[UIViewController alloc] init];
</code></pre>

    <p>因为在 <code>NSObject+A2BlockDelegate</code> 中会进行<strong>方法调剂</strong>，修改原有方法的实现，每次在设置 <code>delegate</code> 时，会将这个值设置传到 <code>realDelegate</code> 中。</p>
  </li>
  <li>在自己的类中查找该方法的选择子</li>
  <li>如果上面三个步骤都没有得到相应，那么调用 <code>NSObject</code> 对象的 <code>methodSignatureForSelector:</code> 方法获取方法签名，当然可能返回空值</li>
</ol>

<p>====</p>

<p><code>forwardInvocation:</code> 的实现其实跟上面的方法的思路差不多</p>

<pre><code class="language-objectivec">- (void)forwardInvocation:(NSInvocation *)outerInv
{
	SEL selector = outerInv.selector;
	A2BlockInvocation *innerInv = nil;
	if ((innerInv = [self.invocationsBySelectors bk_objectForSelector:selector])) {
		[innerInv invokeWithInvocation:outerInv];
	} else if ([self.realDelegate respondsToSelector:selector]) {
		[outerInv invokeWithTarget:self.realDelegate];
	}
}
</code></pre>

<ol>
  <li>
    <p>判断 <code>invocationsBySelectors</code> 属性中是否存储了该选择子对应的 <code>A2BlockInvocation</code>，然后调用 <code>invokeWithInvocation:</code> 传入 <code>outerInv</code> 转发这个方法，最终会调用 <code>- [A2BlockInvocation invokeWithInvocation:returnValue:setOnInvocation:]
</code></p>
  </li>
  <li>
    <p>判断 <code>realDelegate</code> 是否实现了该方法，如果真正的代理能做出响应，将方法转发给 <code>realDelegate</code></p>
  </li>
</ol>

<h5 id="block-实现方法-blockimplementationformethod-和-implementmethodwithblock">Block 实现方法 blockImplementationForMethod: 和 implementMethod:withBlock:</h5>

<p>这部分的代码其实相当于平时的 Getter/Setter</p>

<pre><code class="language-objectivec">- (id)blockImplementationForMethod:(SEL)selector
{
	A2BlockInvocation *invocation = nil;
	if ((invocation = [self.invocationsBySelectors bk_objectForSelector:selector]))
		return invocation.block;
	return NULL;
}
</code></pre>

<p>因为 block 都是在 <code>A2BlockInvocation</code> 中封装的，所以在通过选择子查找 block 的时候，实际上是查找对应的 <code>A2BlockInvocation</code>，然后返回它的 block。</p>

<pre><code class="language-objectivec">- (void)implementMethod:(SEL)selector withBlock:(id)block
{

	#1: 参数检查，省略

	if (!block) {
		[self.invocationsBySelectors bk_removeObjectForSelector:selector];
		return;
	}

	#2: 实例化 A2BlockInvocation

	[self.invocationsBySelectors bk_setObject:inv forSelector:selector];
}
</code></pre>

<p>如果能获取到方法的描述，那么就可以得到对应的方法签名，然后调用不同的初始化方法实例一个 <code>A2Blockinvocation</code> 对象。</p>

<pre><code class="language-objectivec">	struct objc_method_description methodDescription = protocol_getMethodDescription(self.protocol，selector，YES，!isClassMethod);
	if (!methodDescription.name) methodDescription = protocol_getMethodDescription(self.protocol，selector，NO，!isClassMethod);

	A2BlockInvocation *inv = nil;
	if (methodDescription.name) {
	    NSMethodSignature *protoSig = [NSMethodSignature signatureWithObjCTypes:methodDescription.types];
	    inv = [[A2BlockInvocation alloc] initWithBlock:block methodSignature:protoSig];
	} else {
	    inv = [[A2BlockInvocation alloc] initWithBlock:block];
	}
</code></pre>

<p>这两个方法的实现，主要目的是<strong>为子类实现代理方法提供支持</strong>。</p>

<h4 id="nsobjecta2dynamicdelegate-为对象添加动态代理">NSObject+A2DynamicDelegate 为对象添加动态代理</h4>

<p>这个分类是为所有的对象提供简单快捷的接口找到对应的动态代理:</p>

<pre><code class="language-objectivec">@property (readonly，strong) id bk_dynamicDataSource;
@property (readonly，strong) id bk_dynamicDelegate;
- (id)bk_dynamicDelegateForProtocol:(Protocol *)protocol;
</code></pre>

<p>以 <code>UITableView</code> 为例:</p>

<ul>
  <li>访问 <code>tableView.bk_dynamicDataSource</code> 那么它就会寻找 <code>A2DynamicUITableViewDataSource</code> 的对象</li>
  <li>访问 <code>tableView.bk_dynamicDelegate</code> 那么它就会寻找 <code>A2DynamicUITableViewDelegate</code> 的对象</li>
</ul>

<p>这些对象都是在后台进程中惰性初始化的：</p>

<pre><code class="language-objectivec">- (id)bk_dynamicDelegateWithClass:(Class)cls forProtocol:(Protocol *)protocol
{
	__block A2DynamicDelegate *dynamicDelegate;

	dispatch_sync(a2_backgroundQueue()，^{
		dynamicDelegate = objc_getAssociatedObject(self，(__bridge const void *)protocol);

		if (!dynamicDelegate)
		{
			dynamicDelegate = [[cls alloc] initWithProtocol:protocol];
			objc_setAssociatedObject(self，(__bridge const void *)protocol，dynamicDelegate，OBJC_ASSOCIATION_RETAIN_NONATOMIC);
		}
	});

	return dynamicDelegate;
}
</code></pre>

<h4 id="nsobjecta2blockdelegate">NSObject+A2BlockDelegate</h4>

<p>我们在概述的一部分实际上已经接触过这个分类里面的重要方法 <code>bk_linkProtocol:methods:</code>，它动态实现所有添加的 block 属性的存取方法，比如说 <code>bk_didFinishPickingMediaBlock</code> <code>bk_didCancelBlock</code></p>

<pre><code class="language-objectivec">		IMP getterImplementation = imp_implementationWithBlock(^(NSObject *delegatingObject) {
			A2DynamicDelegate *delegate = getDynamicDelegate(delegatingObject，protocol，info，NO);
			return [delegate blockImplementationForMethod:selector];
		});

		IMP setterImplementation = imp_implementationWithBlock(^(NSObject *delegatingObject，id block) {
			A2DynamicDelegate *delegate = getDynamicDelegate(delegatingObject，protocol，info，YES);
			[delegate implementMethod:selector withBlock:block];
		});
</code></pre>

<p>方法调剂之后的存取方法如下</p>

<ul>
  <li>getter: 以 selector 为键在动态代理中查找对应的 block</li>
  <li>setter: 以 selector 也就是代理方法为键，通过 <code>implementMethod:withBlock:</code> 方法以 <code>A2BlockInvocation</code> 的形式存储 block</li>
</ul>

<p>另一个方法 <code>bk_registerDynamicDelegateNamed:forProtocol:</code>，它主要功能就是修改 getter 和 setter 方法，将原有的 <code>delegate</code> 转发到 <code>realDelegate</code>，修改原有的 <code>delegate</code> 的实现，实现的方法就是喜闻乐见的方法调节：</p>

<pre><code class="language-objectivec">	IMP setterImplementation = imp_implementationWithBlock(^(NSObject *delegatingObject，id delegate) {
		A2DynamicDelegate *dynamicDelegate = getDynamicDelegate(delegatingObject，protocol，infoAsPtr，YES);
		if ([delegate isEqual:dynamicDelegate]) {
			delegate = nil;
		}
		dynamicDelegate.realDelegate = delegate;
	});

	IMP getterImplementation = imp_implementationWithBlock(^(NSObject *delegatingObject) {
		return [delegatingObject bk_dynamicDelegateForProtocol:a2_protocolForDelegatingObject(delegatingObject，protocol)];
	});
</code></pre>

<p>注意，在这里省略了一些与脉络无关的实现细节，在调剂过后 <code>delegate</code> 的存取方法如下：</p>

<ul>
  <li>getter：返回一个动态代理对象</li>
  <li>setter：设置代理并不会改变 <code>delegate</code> 中存储的动态代理，只会修改 <code>realDelegate</code></li>
</ul>

<p>我们现在有了通过 runtime 实现 block 的 getter/setter，修改原有的 <code>delegate</code> 属性的方法将对象的代理设置为动态代理，接下来要在子类化动态代理，使用动态代理的子类实现所有的代理方法。</p>

<h4 id="a2dynamicuitextfielddelegate">A2DynamicUITextFieldDelegate</h4>

<p><code>A2DynamicUITextFieldDelegate</code> 和 <code>UITextField+BlocksKit</code> 位于统一文件下，它是一个私有类，我们选取其中一个简单的代理方法：</p>

<pre><code class="language-objectivec">- (void)textFieldDidEndEditing:(UITextField *)textField
{
	id realDelegate = self.realDelegate;
	if (realDelegate &amp;&amp; [realDelegate respondsToSelector:@selector(textFieldDidEndEditing:)])
		[realDelegate textFieldDidEndEditing:textField];
	void (^block)(UITextField *) = [self blockImplementationForMethod:_cmd];
	if (block)
		block(textField);
}
</code></pre>

<ol>
  <li>当 <code>realDelegate</code> 实现了该代理方法时，首先调用代理的方法</li>
  <li>当该代理方法对应的 block 存在的话，也会调用该 block</li>
</ol>

<h4 id="uitextfieldblockskit-分类和-load-方法">UITextField+BlocksKit 分类和 load 方法</h4>

<p>在最后就是对 <code>NSObject+A2BlockDelegate</code> 分类中方法的调用</p>

<pre><code class="language-objectivec">+ (void)load {
    [self bk_registerDynamicDelegate];
    [self bk_linkDelegateMethods: @{
        @"bk_shouldBeginEditingBlock": @"textFieldShouldBeginEditing:",
        @"bk_didBeginEditingBlock": @"textFieldDidBeginEditing:",
        @"bk_shouldEndEditingBlock": @"textFieldShouldEndEditing:",
        @"bk_didEndEditingBlock" : @"textFieldDidEndEditing:",
        @"bk_shouldChangeCharactersInRangeWithReplacementStringBlock" : @"textField:shouldChangeCharactersInRange:replacementString:",
        @"bk_shouldClearBlock" : @"textFieldShouldClear:",
        @"bk_shouldReturnBlock" : @"textFieldShouldReturn:",
    }];
}
</code></pre>

<p>为什么在 <code>load</code> 方法中调用这两个方法？原因有两个：</p>

<ul>
  <li>该方法只会调用一次，减少了调用的次数</li>
  <li>该方法只会在文件被引用的时候调用，减少了不必要的动态代理注册等一系列步骤</li>
</ul>

<p>其中的 <code>autoreleasepool</code> 的作用在上面已经介绍过了，它使得其它地方的代码不会受到这里注册代理，链接代理方法中产生的对象的影响。</p>

<p><code>UIKit+BlocksKit</code> 这些分类的另一作用就是提供 block 回调接口，声明属性，然后使用 <code>@dynamic</code> 表明属性是动态生成的。</p>

<pre><code class="language-objectivec">@property (nonatomic，copy，nullable) BOOL(^bk_shouldBeginEditingBlock)(UITextField *textField);
@property (nonatomic，copy，nullable) void(^bk_didBeginEditingBlock)(UITextField *textField);

...

@dynamic bk_shouldBeginEditingBlock，bk_didBeginEditingBlock ...;
</code></pre>

<h2 id="end">End</h2>

<p>到这里对于 BlocksKit 的实现机制就基本上已经看完了。我们在来看一下 整个 BlocksKit 的结构图：</p>

<p><img src="http://7xrlu3.com1.z0.glb.clouddn.com/2016-03-20-blockskit.png" alt="" /></p>

<p>我写这篇文章大约用了七天的时间，如果你对其中的内容有些疑问，可以发邮件或者在下面留言。</p>

<ul>
  <li><a href="http://nju520.me/blockskit-1/">神奇的 BlocksKit（一）</a></li>
  <li><a href="http://nju520.me/blockskit-2/">神奇的 BlocksKit（二）</a></li>
</ul>

<iframe src="http://ghbtns.com/github-btn.html?user=nju520&amp;type=follow&amp;size=large" height="30" width="240" frameborder="0" scrolling="0" style="width:240px; height: 30px;" allowtransparency="true"></iframe>

<p>Blog: <a href="http://nju520.me">nju520</a></p>

  ]]></description>
</item>

<item>
  <title>神奇的 BlocksKit （一）</title>
  <link>//blockskit-1</link>
  <author>nju520</author>
  <pubDate>2016-03-10T17:42:33+08:00</pubDate>
  <guid>//blockskit-1</guid>
  <description><![CDATA[
  <blockquote>
  <p>关注仓库，及时获得更新：<a href="https://github.com/nju520/iOS-Source-Code-Analyze">iOS-Source-Code-Analyze</a></p>
</blockquote>

<p><strong>高能预警：本篇文章非常长，因为 BlocksKit 的实现还是比较复杂和有意的。这篇文章不是为了剖析 iOS 开发中的 block 的实现以及它是如何组成甚至使用的，如果你想通过这篇文章来了解 block 的实现，它并不能帮到你。</strong></p>

<p>Block 到底是什么？这可能是困扰很多 iOS 初学者的一个问题。如果你在 Google 上搜索类似的问题时，可以查找到几十万条结果，block 在 iOS 开发中有着非常重要的地位，而且它的作用也越来越重要。</p>

<hr />

<h2 id="概述">概述</h2>

<p>这篇文章仅对 <a href="https://github.com/zwaldowski/BlocksKit">BlocksKit</a> v2.2.5 的源代码进行分析，从框架的内部理解下面的功能是如何实现的：</p>

<ul>
  <li>为 <code>NSArray</code>、 <code>NSDictionary</code> 和 <code>NSSet</code> 等集合类型以及对应的可变集合类型 <code>NSMutableArray</code>、 <code>NSMutableDictionary</code> 和 <code>NSMutableSet</code> 添加 <code>bk_each:</code> 等方法完成对集合中元素的<strong>快速遍历</strong></li>
  <li>使用 block 对 <code>NSObject</code> 对象 KVO</li>
  <li>为 <code>UIView</code> 对象添加 <code>bk_whenTapped:</code> 等方法快速添加手势</li>
  <li>使用 block 替换 <code>UIKit</code> 中的 <code>delegate</code> ，涉及到核心模块 <code>DynamicDelegate</code>。</li>
</ul>

<p>BlocksKit 框架中包括但不仅限于上述的功能，这篇文章是对 <em>v2.2.5</em> 版本源代码的分析，其它版本的功能不会在本篇文章中具体讨论。</p>

<h2 id="如何提供简洁的遍历方法">如何提供简洁的遍历方法</h2>

<p>BlocksKit 实现的最简单的功能就是为集合类型添加方法遍历集合中的元素。</p>

<pre><code class="language-objectivec">[@[@1,@2,@3] bk_each:^(id obj) {
    NSLog(@"%@"，obj);
}];
</code></pre>

<p>这段代码非常简单，我们可以使用 <code>enumerateObjectsUsingBlock:</code> 方法替代 <code>bk_each:</code> 方法：</p>

<pre><code class="language-objectivec">[@[@1,@2,@3] enumerateObjectsUsingBlock:^(id obj，NSUInteger idx，BOOL *stop) {
    NSLog(@"%@"，obj);
}];

2016-03-05 16:02:57.295 nju520[10725:453402] 1
2016-03-05 16:02:57.296 nju520[10725:453402] 2
2016-03-05 16:02:57.297 nju520[10725:453402] 3
</code></pre>

<p>这部分代码的实现也没什么难度：</p>

<pre><code class="language-objectivec">- (void)bk_each:(void (^)(id obj))block
{
	NSParameterAssert(block != nil);

	[self enumerateObjectsUsingBlock:^(id obj，NSUInteger idx，BOOL *stop) {
		block(obj);
	}];
}
</code></pre>

<p>它在 block 执行前会判断传进来的 block 是否为空，然后就是调用遍历方法，把数组中的每一个 <code>obj</code> 传给 block。</p>

<p>BlocksKit 在这些集合类中所添加的一些方法在 Ruby、Haskell 等语言中也同样存在。如果你接触过上面的语言，理解这里方法的功能也就更容易了，不过这不是这篇文章关注的主要内容。</p>

<pre><code class="language-objectivec">// NSArray+BlocksKit.h

- (void)bk_each:(void (^)(id obj))block;
- (void)bk_apply:(void (^)(id obj))block;
- (id)bk_match:(BOOL (^)(id obj))block;
- (NSArray *)bk_select:(BOOL (^)(id obj))block;
- (NSArray *)bk_reject:(BOOL (^)(id obj))block;
- (NSArray *)bk_map:(id (^)(id obj))block;
- (id)bk_reduce:(id)initial withBlock:(id (^)(id sum，id obj))block;
- (NSInteger)bk_reduceInteger:(NSInteger)initial withBlock:(NSInteger(^)(NSInteger result，id obj))block;
- (CGFloat)bk_reduceFloat:(CGFloat)inital withBlock:(CGFloat(^)(CGFloat result，id obj))block;
- (BOOL)bk_any:(BOOL (^)(id obj))block;
- (BOOL)bk_none:(BOOL (^)(id obj))block;
- (BOOL)bk_all:(BOOL (^)(id obj))block;
- (BOOL)bk_corresponds:(NSArray *)list withBlock:(BOOL (^)(id obj1，id obj2))block;
</code></pre>

<h2 id="nsobject-上的魔法">NSObject 上的魔法</h2>

<blockquote>
  <p><code>NSObject</code> 是 iOS 中的『上帝类』。</p>
</blockquote>

<p>在 <code>NSObject</code> 上添加的方法几乎会添加到 Cocoa Touch 中的所有类上，关于 <code>NSObject</code> 的讨论和总共分为以下三部分进行：</p>

<ol>
  <li>AssociatedObject</li>
  <li>BlockExecution</li>
  <li>BlockObservation</li>
</ol>

<h3 id="添加-associatedobject">添加 AssociatedObject</h3>

<p>经常跟 runtime 打交道的人不可能不知道 <a href="http://nshipster.cn/associated-objects/">AssociatedObject</a> ，当我们想要为一个已经存在的类添加属性时，就需要用到 AssociatedObject 为类添加属性，而  BlocksKit 提供了更简单的方法来实现，不需要新建一个分类。</p>

<pre><code class="language-objectivec">NSObject *test = [[NSObject alloc] init];
[test bk_associateValue:@"nju520" withKey:@" name"];
NSLog(@"%@"，[test bk_associatedValueForKey:@"name"]);

2016-03-05 16:02:25.761 nju520[10699:452125] nju520
</code></pre>

<p>这里我们使用了 <code>bk_associateValue:withKey:</code> 和 <code>bk_associatedValueForKey:</code> 两个方法设置和获取 <code>name</code> 对应的值 <code>nju520</code>.</p>

<pre><code class="language-objectivec">- (void)bk_associateValue:(id)value withKey:(const void *)key
{
	objc_setAssociatedObject(self，key，value，OBJC_ASSOCIATION_RETAIN_NONATOMIC);
}
</code></pre>

<p>这里的 <code>OBJC_ASSOCIATION_RETAIN_NONATOMIC</code> 表示当前属性为 <code>retain</code> <code>nonatomic</code> 的，还有其它的参数如下：</p>

<pre><code class="language-objectivec">/**
 * Policies related to associative references.
 * These are options to objc_setAssociatedObject()
 */
typedef OBJC_ENUM(uintptr_t，objc_AssociationPolicy) {
    OBJC_ASSOCIATION_ASSIGN = 0，          /**&lt; Specifies a weak reference to the associated object. */
    OBJC_ASSOCIATION_RETAIN_NONATOMIC = 1，/**&lt; Specifies a strong reference to the associated object.
                                            *   The association is not made atomically. */
    OBJC_ASSOCIATION_COPY_NONATOMIC = 3，  /**&lt; Specifies that the associated object is copied.
                                            *   The association is not made atomically. */
    OBJC_ASSOCIATION_RETAIN = 01401，      /**&lt; Specifies a strong reference to the associated object.
                                            *   The association is made atomically. */
    OBJC_ASSOCIATION_COPY = 01403          /**&lt; Specifies that the associated object is copied.
                                            *   The association is made atomically. */
};
</code></pre>

<p>上面的这个 NS_ENUM 也没什么好说的，需要注意的是这里没有 <code>weak</code> 属性。</p>

<p>BlocksKit 通过另一种方式实现了『弱属性』：</p>

<pre><code class="language-objectivec">- (void)bk_weaklyAssociateValue:(__autoreleasing id)value withKey:(const void *)key
{
	_BKWeakAssociatedObject *assoc = objc_getAssociatedObject(self，key);
	if (!assoc) {
		assoc = [_BKWeakAssociatedObject new];
		[self bk_associateValue:assoc withKey:key];
	}
	assoc.value = value;
}
</code></pre>

<p>在这里先获取了一个 <code>_BKWeakAssociatedObject</code> 对象 <code>assoc</code>，然后更新这个对象的属性 <code>value</code>。</p>

<p>因为直接使用 AssociatedObject 不能为对象添加弱属性，所以在这里添加了一个对象，然后让这个对象持有一个弱属性：</p>

<pre><code class="language-objectivec">@interface _BKWeakAssociatedObject : NSObject

@property (nonatomic，weak) id value;

@end

@implementation _BKWeakAssociatedObject

@end
</code></pre>

<p>这就是 BlocksKit 实现弱属性的方法，我觉得这个实现的方法还是比较简洁的。</p>

<p>getter 方法的实现也非常类似：</p>

<pre><code class="language-objectivec">- (id)bk_associatedValueForKey:(const void *)key
{
	id value = objc_getAssociatedObject(self，key);
	if (value &amp;&amp; [value isKindOfClass:[_BKWeakAssociatedObject class]]) {
		return [(_BKWeakAssociatedObject *)value value];
	}
	return value;
}
</code></pre>

<h3 id="在任意对象上执行-block">在任意对象上执行 block</h3>

<p>通过这个类提供的一些接口，可以在任意对象上快速执行线程安全、异步的 block，而且这些 block 也可以在执行之前取消。</p>

<pre><code class="language-objectivec">- (id &lt;NSObject，NSCopying&gt;)bk_performOnQueue:(dispatch_queue_t)queue afterDelay:(NSTimeInterval)delay usingBlock:(void (^)(id obj))block
{
    NSParameterAssert(block != nil);

    return BKDispatchCancellableBlock(queue，delay，^{
        block(self);
    });
}
</code></pre>

<p>判断 block 是否为空在这里都是细枝末节，这个方法中最关键的也就是它返回了一个可以取消的 block，而这个 block 就是用静态函数 <code>BKDispatchCancellableBlock</code> 生成的。</p>

<pre><code class="language-objectivec">static id &lt;NSObject，NSCopying&gt; BKDispatchCancellableBlock(dispatch_queue_t queue，NSTimeInterval delay，void(^block)(void)) {
    dispatch_time_t time = BKTimeDelay(delay);

#if DISPATCH_CANCELLATION_SUPPORTED
    if (BKSupportsDispatchCancellation()) {
        dispatch_block_t ret = dispatch_block_create(0，block);
        dispatch_after(time，queue，ret);
        return ret;
    }
#endif

    __block BOOL cancelled = NO;
    void (^wrapper)(BOOL) = ^(BOOL cancel) {
        if (cancel) {
            cancelled = YES;
            return;
        }
        if (!cancelled) block();
    };

    dispatch_after(time，queue，^{
        wrapper(NO);
    });

    return wrapper;
}
</code></pre>

<p>这个函数首先会执行 <code>BKSupportsDispatchCancellation</code> 来判断当前平台和版本是否支持使用 GCD 取消 block，当然一般都是支持的：</p>

<ul>
  <li>函数返回的是 <code>YES</code>，那么在 block 被派发到指定队列之后就会返回这个 <code>dispatch_block_t</code> 类型的 block</li>
  <li>函数返回的是 <code>NO</code>，那么就会就会手动包装一个可以取消的 block，具体实现的部分如下：</li>
</ul>

<pre><code class="language-objectivec">__block BOOL cancelled = NO;
void (^wrapper)(BOOL) = ^(BOOL cancel) {
    if (cancel) {
        cancelled = YES;
        return;
    }
    if (!cancelled) block();
};

dispatch_after(time，queue，^{
    wrapper(NO);
});

return wrapper;
</code></pre>

<p>上面这部分代码就先创建一个 <code>wrapper</code> block，然后派发到指定队列，派发到指定队列的这个 block 是一定会执行的，但是怎么取消这个 block 呢？</p>

<p>如果当前 block 没有执行，我们在外面调用一次 <code>wrapper(YES)</code> 时，block 内部的 <code>cancelled</code> 变量就会被设置为 <code>YES</code>，所以 block 就不会执行。</p>

<ol>
  <li><code>dispatch_after  --- cancelled = NO</code></li>
  <li><strong><code>wrapper(YES) --- cancelled = YES</code></strong></li>
  <li><code>wrapper(NO) --- cancelled = YES</code> block 不会执行</li>
</ol>

<p>这是实现取消的关键部分：</p>

<pre><code class="language-objectivec">+ (void)bk_cancelBlock:(id &lt;NSObject，NSCopying&gt;)block
{
    NSParameterAssert(block != nil);

#if DISPATCH_CANCELLATION_SUPPORTED
    if (BKSupportsDispatchCancellation()) {
        dispatch_block_cancel((dispatch_block_t)block);
        return;
    }
#endif

    void (^wrapper)(BOOL) = (void(^)(BOOL))block;
    wrapper(YES);
}
</code></pre>

<ul>
  <li>GCD 支持取消 block，那么直接调用 <code>dispatch_block_cancel</code> 函数取消 block</li>
  <li>GCD 不支持取消 block 那么调用一次 <code>wrapper(YES)</code></li>
</ul>

<h3 id="使用-block-封装-kvo">使用 Block 封装 KVO</h3>

<p>BlocksKit 对 KVO 的封装由两部分组成：</p>

<ol>
  <li><code>NSObject</code> 的分类负责提供便利方法</li>
  <li>私有类 <code>_BKObserver</code> 具体实现原生的 KVO 功能</li>
</ol>

<h4 id="提供接口并在-dealloc-时停止-blockobservation">提供接口并在 <code>dealloc</code> 时停止 BlockObservation</h4>

<p><code>NSObject+BKBlockObservation</code> 这个分类中的大部分接口都会调用这个方法:</p>

<pre><code class="language-objectivec">- (void)bk_addObserverForKeyPaths:(NSArray *)keyPaths identifier:(NSString *)identifier options:(NSKeyValueObservingOptions)options context:(BKObserverContext)context task:(id)task
{
	#1: 检查参数，省略

	#2: 使用神奇的方法在分类中覆写 dealloc

	NSMutableDictionary *dict;
	_BKObserver *observer = [[_BKObserver alloc] initWithObservee:self keyPaths:keyPaths context:context task:task];
	[observer startObservingWithOptions:options];

	#3: 惰性初始化 bk_observerBlocks 也就是下面的 dict，省略

	dict[identifier] = observer;
}
</code></pre>

<p>我们不会在这里讨论 <code>#1</code>、<code>#3</code> 部分，再详细阅读 <code>#2</code> 部分代码之前，先来看一下这个省略了绝大部分细节的核心方法。</p>

<p>使用传入方法的参数创建了一个 <code>_BKObserver</code> 对象，然后调用 <code>startObservingWithOptions:</code> 方法开始 KVO 观测相应的属性，然后以 <code>{identifier，obeserver}</code> 的形式存到字典中保存。</p>

<p>这里实在没什么新意，我们在下一小节中会介绍 <code>startObservingWithOptions:</code> 这一方法。</p>

<h4 id="在分类中调剂-dealloc-方法">在分类中调剂 dealloc 方法</h4>

<p>这个问题我觉得是非常值得讨论的一个问题，也是我最近在写框架时遇到很棘手的一个问题。</p>

<blockquote>
  <p>当我们在分类中注册一些通知或者使用 KVO 时，很有可能会找不到注销这些通知的时机。</p>
</blockquote>

<p>因为在<strong>分类中是无法直接实现 <code>dealloc</code> 方法的</strong>。 在 iOS8 以及之前的版本，如果某个对象被释放了，但是刚对象的注册的通知没有被移除，那么当事件再次发生，就会<em>向已经释放的对象发出通知</em>，整个程序就会崩溃。</p>

<p>这里解决的办法就十分的巧妙:</p>

<pre><code class="language-objectivec">Class classToSwizzle = self.class;
// 获取所有修改过 dealloc 方法的类
NSMutableSet *classes = self.class.bk_observedClassesHash;

// 保证互斥避免 classes 出现难以预测的结果
@synchronized (classes) {

   // 获取当前类名，并判断是否修改过 dealloc 方法以减少这部分代码的调用次数
   NSString *className = NSStringFromClass(classToSwizzle);
   if (![classes containsObject:className]) {
       // 这里的 sel_registerName 方法会返回 dealloc 的 selector，因为 dealloc 已经注册过
       SEL deallocSelector = sel_registerName("dealloc");

		__block void (*originalDealloc)(__unsafe_unretained id，SEL) = NULL;

       // 实现新的 dealloc 方法
		id newDealloc = ^(__unsafe_unretained id objSelf) {
           //在方法 dealloc 之前移除所有 observer
           [objSelf bk_removeAllBlockObservers];

           if (originalDealloc == NULL) {
               // 如果原有的 dealloc 方法没有被找到就会查找父类的 dealloc 方法，调用父类的 dealloc 方法
               struct objc_super superInfo = {
                   .receiver = objSelf,
                   .super_class = class_getSuperclass(classToSwizzle)
               };

               void (*msgSend)(struct objc_super *，SEL) = (__typeof__(msgSend))objc_msgSendSuper;
               msgSend(&amp;superInfo，deallocSelector);
           } else {
               // 如果 dealloc 方法被找到就会直接调用该方法，并传入参数
               originalDealloc(objSelf，deallocSelector);
           }
       };

       // 构建选择子实现 IMP
       IMP newDeallocIMP = imp_implementationWithBlock(newDealloc);

       // 向当前类添加方法，但是多半不会成功，因为类已经有 dealloc 方法
       if (!class_addMethod(classToSwizzle，deallocSelector，newDeallocIMP，"v@:")) {
           // 获取原有 dealloc 实例方法
           Method deallocMethod = class_getInstanceMethod(classToSwizzle，deallocSelector);

           // 存储 dealloc 方法实现防止在 set 的过程中调用该方法
           originalDealloc = (void(*)(__unsafe_unretained id，SEL))method_getImplementation(deallocMethod);

           // 重新设置 dealloc 方法的实现，并存储到 originalDealloc 防止方法实现改变
           originalDealloc = (void(*)(__unsafe_unretained id，SEL))method_setImplementation(deallocMethod，newDeallocIMP);
       }

       // 将当前类名添加到已经改变的类的集合中
       [classes addObject:className];
   }
}
</code></pre>

<p>这部分代码的执行顺序如下:</p>

<ol>
  <li>首先调用 <code>bk_observedClassesHash</code> 类方法获取所有修改过 <code>dealloc</code> 方法的类的集合 <code>classes</code></li>
  <li>使用 <code>@synchronized (classes)</code> 保证互斥，避免同时修改 <code>classes</code> 集合的类过多出现意料之外的结果</li>
  <li>判断即将调剂方法的类 <code>classToSwizzle</code> 是否调剂过 <code>dealloc</code> 方法</li>
  <li>如果 <code>dealloc</code> 方法没有调剂过，就会通过 <code>sel_registerName("dealloc")</code> 方法获取选择子，这行代码并不会真正注册 <code>dealloc</code> 选择子而是会获取 <code>dealloc</code> 的选择子，具体原因可以看这个方法的实现 <a href="https://developer.apple.com/library/prerelease/ios/documentation/Cocoa/Reference/ObjCRuntimeRef/index.html#//apple_ref/c/func/sel_registerName">sel_registerName</a></li>
  <li>
    <p>在新的 <code>dealloc</code> 中<strong>添加移除 Observer 的方法</strong>， 再调用原有的 <code>dealloc</code></p>

    <pre><code> id newDealloc = ^(__unsafe_unretained id objSelf) {
 	[objSelf bk_removeAllBlockObservers];

    if (originalDealloc == NULL) {
     	struct objc_super superInfo = {
      		.receiver = objSelf,
     		.super_class = class_getSuperclass(classToSwizzle)
     	};
         void (*msgSend)(struct objc_super *，SEL) = (__typeof__(msgSend))objc_msgSendSuper;
         msgSend(&amp;superInfo，deallocSelector);
     } else {
         originalDealloc(objSelf，deallocSelector);
     }
 };
 IMP newDeallocIMP = imp_implementationWithBlock(newDealloc);
</code></pre>

    <ol>
      <li>调用 <code>bk_removeAllBlockObservers</code> 方法移除所有观察者，也就是这段代码的最终目的</li>
      <li>根据 <code>originalDealloc</code> 是否为空，决定是向父类发送消息，还是直接调用 <code>originalDealloc</code> 并传入 <code>objSelf，deallocSelector</code> 作为参数</li>
    </ol>
  </li>
  <li>
    <p>在我们获得了新 <code>dealloc</code> 方法的选择子和 <code>IMP</code> 时，就要改变原有的 <code>dealloc</code> 的实现了</p>

    <pre><code> if (!class_addMethod(classToSwizzle，deallocSelector，newDeallocIMP，"v@:")) {
     // The class already contains a method implementation.
     Method deallocMethod = class_getInstanceMethod(classToSwizzle，deallocSelector);

    // We need to store original implementation before setting new implementation
     // in case method is called at the time of setting.
     originalDealloc = (void(*)(__unsafe_unretained id，SEL))method_getImplementation(deallocMethod);

    // We need to store original implementation again，in case it just changed.
     originalDealloc = (void(*)(__unsafe_unretained id，SEL))method_setImplementation(deallocMethod，newDeallocIMP);
 }
</code></pre>

    <ol>
      <li>调用 <code>class_addMethod</code> 方法为当前类添加选择子为 <code>dealloc</code> 的方法（当然 99.99% 的可能不会成功）</li>
      <li>获取原有的 <code>dealloc</code> 实例方法</li>
      <li>将原有的实现保存到 <code>originalDealloc</code> 中，防止使用 <code>method_setImplementation</code> 重新设置该方法的过程中调用 <code>dealloc</code> 导致无方法可用</li>
      <li>重新设置 <code>dealloc</code> 方法的实现。同样，将实现存储到 <code>originalDealloc</code> 中防止实现改变</li>
    </ol>
  </li>
</ol>

<p>关于在分类中调剂 <code>dealloc</code> 方法的这部分到这里就结束了，下一节将继续分析私有类 <code>_BKObserver</code>。</p>

<h4 id="私有类-_bkobserver">私有类 <code>_BKObserver</code></h4>

<p><code>_BKObserver</code> 是用来观测属性的对象，它在接口中定义了 4 个属性：</p>

<pre><code class="language-objectivec">@property (nonatomic，readonly，unsafe_unretained) id observee;
@property (nonatomic，readonly) NSMutableArray *keyPaths;
@property (nonatomic，readonly) id task;
@property (nonatomic，readonly) BKObserverContext context;
</code></pre>

<p>上面四个属性的具体作用在这里不说了，上面的 <code>bk_addObserverForKeyPaths:identifier:options:context:</code> 方法中调用 <code>_BKObserver</code> 的初始化方法 <code>initWithObservee:keyPaths:context:task:</code> 太简单了也不说了。</p>

<pre><code class="language-objectivec">_BKObserver *observer = [[_BKObserver alloc] initWithObservee:self keyPaths:keyPaths context:context task:task];
[observer startObservingWithOptions:options];
</code></pre>

<p>上面的第一行代码生成一个 <code>observer</code> 实例之后立刻调用了 <code>startObservingWithOptions:</code> 方法开始观测对应的 <code>keyPath</code>：</p>

<pre><code class="language-objectivec">- (void)startObservingWithOptions:(NSKeyValueObservingOptions)options
{
	@synchronized(self) {
		if (_isObserving) return;

		#1：遍历 keyPaths 实现 KVO

		_isObserving = YES;
	}
}
</code></pre>

<p><code>startObservingWithOptions:</code> 方法最重要的就是第 <code>#1</code> 部分：</p>

<pre><code class="language-objectivec">[self.keyPaths bk_each:^(NSString *keyPath) {
	[self.observee addObserver:self forKeyPath:keyPath options:options context:BKBlockObservationContext];
}];
</code></pre>

<p>遍历自己的 <code>keyPaths</code> 然后让 <code>_BKObserver</code> 作观察者观察自己，然后传入对应的 <code>keyPath</code>。</p>

<p>关于 <code>_stopObservingLocked</code> 方法的实现也十分的相似，这里就不说了。</p>

<pre><code class="language-objectivec">[keyPaths bk_each:^(NSString *keyPath) {
	[observee removeObserver:self forKeyPath:keyPath context:BKBlockObservationContext];
}];
</code></pre>

<p>到目前为止，我们还没有看到实现 KVO 所必须的方法 <code>observeValueForKeyPath:ofObject:change:context</code>，这个方法就是每次属性改变之后的回调：</p>

<pre><code class="language-objectivec">- (void)observeValueForKeyPath:(NSString *)keyPath ofObject:(id)object change:(NSDictionary *)change context:(void *)context
{
	if (context != BKBlockObservationContext) return;

	@synchronized(self) {
		switch (self.context) {
			case BKObserverContextKey: {
				void (^task)(id) = self.task;
				task(object);
				break;
			}
			case BKObserverContextKeyWithChange: {
				void (^task)(id，NSDictionary *) = self.task;
				task(object，change);
				break;
			}
			case BKObserverContextManyKeys: {
				void (^task)(id，NSString *) = self.task;
				task(object，keyPath);
				break;
			}
			case BKObserverContextManyKeysWithChange: {
				void (^task)(id，NSString *，NSDictionary *) = self.task;
				task(object，keyPath，change);
				break;
			}
		}
	}
}
</code></pre>

<p>这个方法的实现也很简单，根据传入的 <code>context</code> 值，对 <code>task</code> 类型转换，并传入具体的值。</p>

<p>这个模块倒着就介绍完了，在下一节会介绍 BlocksKit 对 UIKit 组件一些简单的改造。</p>

<h2 id="改造-uikit">改造 UIKit</h2>

<p>在这个小结会具体介绍 BlocksKit 是如何对一些简单的控件进行改造的，本节大约有两部分内容：</p>

<ul>
  <li>UIGestureRecongizer + UIBarButtonItem + UIControl</li>
  <li>UIView</li>
</ul>

<h3 id="改造-uigesturerecongizeruibarbuttonitem-和-uicontrol">改造 UIGestureRecongizer，UIBarButtonItem 和 UIControl</h3>

<p>先来看一个 <code>UITapGestureRecognizer</code> 使用的例子</p>

<pre><code class="language-objectivec"> UITapGestureRecognizer *singleTap = [UITapGestureRecognizer bk_recognizerWithHandler:^(id sender) {
     NSLog(@"Single tap.");
 } delay:0.18];
 [self addGestureRecognizer:singleTap];
</code></pre>

<p>代码中的 <code>bk_recognizerWithHandler:delay:</code> 方法在最后都会调用初始化方法 <code>bk_initWithHandler:delay:</code> 生成一个 <code>UIGestureRecongizer</code> 的实例</p>

<pre><code class="language-objectivec">- (instancetype)bk_initWithHandler:(void (^)(UIGestureRecognizer *sender，UIGestureRecognizerState state，CGPoint location))block delay:(NSTimeInterval)delay
{
	self = [self initWithTarget:self action:@selector(bk_handleAction:)];
	if (!self) return nil;

	self.bk_handler = block;
	self.bk_handlerDelay = delay;

	return self;
}
</code></pre>

<p>它会在这个方法中传入 <code>target</code> 和 <code>selector</code>。 其中 <code>target</code> 就是 <code>self</code>，而 <code>selector</code> 也会在这个分类中实现：</p>

<pre><code class="language-objectivec">- (void)bk_handleAction:(UIGestureRecognizer *)recognizer
{
	void (^handler)(UIGestureRecognizer *sender，UIGestureRecognizerState state，CGPoint location) = recognizer.bk_handler;
	if (!handler) return;

	NSTimeInterval delay = self.bk_handlerDelay;

	#1: 封装 block 并控制 block 是否可以执行

	self.bk_shouldHandleAction = YES;

    [NSObject bk_performAfterDelay:delay usingBlock:block];
}
</code></pre>

<p>因为在初始化方法 <code>bk_initWithHandler:delay:</code> 中保存了当前手势的 <code>bk_handler</code>，所以直接调用在 Block Execution 一节中提到过的 <code>bk_performAfterDelay:usingBlock:</code> 方法，将 block 派发到指定的队列中，最终完成对 block 的调用。</p>

<h4 id="封装-block-并控制-block-是否可以执行">封装 block 并控制 block 是否可以执行</h4>

<p>这部分代码和前面的部分有些相似，因为这里也用到了一个属性 <code>bk_shouldHandleAction</code> 来控制 block 是否会被执行：</p>

<pre><code class="language-objectivec">CGPoint location = [self locationInView:self.view];
void (^block)(void) = ^{
	if (!self.bk_shouldHandleAction) return;
	handler(self，self.state，location);
};
</code></pre>

<p>====</p>

<p>同样 <code>UIBarButtonItem</code> 和 <code>UIControl</code> 也是用了几乎相同的机制，把 <code>target</code> 设置为 <code>self</code>，让后在分类的方法中调用指定的 block。</p>

<h4 id="uicontrolwrapper">UIControlWrapper</h4>

<p>稍微有些不同的是 <code>UIControl</code>。因为 <code>UIControl</code> 有多种 <code>UIControlEvents</code>，所以使用另一个类 <code>BKControlWrapper</code> 来封装 <code>handler</code> 和 <code>controlEvents</code></p>

<pre><code class="language-objectivec">@property (nonatomic) UIControlEvents controlEvents;
@property (nonatomic，copy) void (^handler)(id sender);
</code></pre>

<p>其中 <code>UIControlWrapper</code> 对象以 <code>{controlEvents，wrapper}</code> 的形式作为 <code>UIControl</code> 的属性存入字典。</p>

<h3 id="改造-uiview">改造 UIView</h3>

<p>因为在上面已经改造过了 <code>UIGestureRecognizer</code>，在这里改造 <code>UIView</code> 就变得很容易了：</p>

<pre><code class="language-objectivec">- (void)bk_whenTouches:(NSUInteger)numberOfTouches tapped:(NSUInteger)numberOfTaps handler:(void (^)(void))block
{
	if (!block) return;

	UITapGestureRecognizer *gesture = [UITapGestureRecognizer bk_recognizerWithHandler:^(UIGestureRecognizer *sender，UIGestureRecognizerState state，CGPoint location) {
		if (state == UIGestureRecognizerStateRecognized) block();
	}];

	gesture.numberOfTouchesRequired = numberOfTouches;
	gesture.numberOfTapsRequired = numberOfTaps;

	[self.gestureRecognizers enumerateObjectsUsingBlock:^(id obj，NSUInteger idx，BOOL *stop) {
		if (![obj isKindOfClass:[UITapGestureRecognizer class]]) return;

		UITapGestureRecognizer *tap = obj;
		BOOL rightTouches = (tap.numberOfTouchesRequired == numberOfTouches);
		BOOL rightTaps = (tap.numberOfTapsRequired == numberOfTaps);
		if (rightTouches &amp;&amp; rightTaps) {
			[gesture requireGestureRecognizerToFail:tap];
		}
	}];

	[self addGestureRecognizer:gesture];
}
</code></pre>

<p><code>UIView</code> 分类只有这一个核心方法，其它的方法都是向这个方法传入不同的参数，这里需要注意的就是。它会遍历所有的 <code>gestureRecognizers</code>，然后把对所有有冲突的手势调用 <code>requireGestureRecognizerToFail:</code> 方法，保证添加的手势能够正常的执行。</p>

<p>由于这篇文章中的内容较多，所以内容分成了两个部分，下一部分介绍的是 BlocksKit 中的最重要的部分动态代理：</p>

<ul>
  <li><a href="http://nju520.me/blockskit-1/">神奇的 BlocksKit（一）</a></li>
  <li><a href="http://nju520.me/blockskit-2/">神奇的 BlocksKit（二）</a></li>
</ul>

<iframe src="http://ghbtns.com/github-btn.html?user=nju520&amp;type=follow&amp;size=large" height="30" width="240" frameborder="0" scrolling="0" style="width:240px; height: 30px;" allowtransparency="true"></iframe>

<p>Blog: <a href="http://nju520.me">nju520</a></p>

  ]]></description>
</item>


  </channel>
</rss>
